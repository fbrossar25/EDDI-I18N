{
  "name": "EDDI FRENCH",
  "description": "Une personnalité neutre mais bavarde.",
  "scripts": {
    "AFMU repairs": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.item} \r\n{if event.repairedfully:\r\n    Totalement réparé\r\n|else:\r\n    partiellement répoaré\r\n    {Occasionally(2, cat(\r\n        \"à \",\r\n        Humanise(event.health*100), \" \",\r\n        \"pourcent de fonctionalité\"\r\n    ))}\r\n}",
      "default": false,
      "name": "AFMU repairs",
      "description": "Triggered when repairing modules using the Auto Field Maintenance Unit (AFMU)"
    },
    "Belt scanned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'belt')}\r\n{SetState('eddi_context_last_action', 'scan')}\r\n{SetState('eddi_context_body_system', system.name)}\r\n{SetState('eddi_context_body_name', event.name)}\r\n{Pause(1000)}\r\n\r\nScan de {P(event.name)} terminé.\r\nUn champ d'astéroïdes de plus.",
      "default": false,
      "name": "Belt scanned",
      "description": "Triggered when you complete a scan of a belt"
    },
    "Blueprint make report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to obtain current inventory of a material}\r\n{set _inventory(required) to:\r\n    {for material in materials:\r\n        {if material.material = required:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Fetch blueprint from state }\r\n{set blueprintname to state.blueprint}\r\n\r\n{_ set blueprintname to \"Lightweight Kill warrant scanner grade 3\"}\r\n\r\n{if blueprintname:\r\n    {_ Fetch full blueprint details }\r\n    {set blueprint to BlueprintDetails(blueprintname)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'blueprint')}\r\n    {SetState('eddi_context_blueprint_name', blueprintname)}\r\n}\r\n\r\n{if !blueprint:\r\n    {_ Fetch from context }\r\n    {set blueprint to BlueprintDetails(state.eddi_context_blueprint_name)}\r\n}\r\n\r\n{set canbemade to 999}\r\n\r\n{if blueprint:\r\n    {_ Find the smallest number of this blueprint that can be made }\r\n\r\n    {set cur to 0}\r\n    {while cur < len(blueprint.materials):\r\n        {set inventory to _inventory(blueprint.materials[cur].material)}\r\n        {if !inventory:\r\n            {set canbemade to 0}\r\n        |else:\r\n            {if inventory.amount < canbemade:\r\n            {set canbemade to inventory.amount}\r\n            }\r\n        }\r\n        {set cur to cur + 1}\r\n    }\r\n\r\n    {if canbemade = 0:\r\n        Vous ne pouvez pas faire de {blueprintname}\r\n    |elif canbemade = 1:\r\n        Vous pouvez en faire un {blueprintname}\r\n    |else:\r\n        Vous pouvez faire {canbemade} {blueprintname}\r\n    }\r\n|else:\r\n    Aucune information disponible sur les matériaux requis pour {blueprintname}\r\n}.",
      "default": false,
      "name": "Blueprint make report",
      "description": "Indique le nombre d'un Blueprint que nous pouvons faire"
    },
    "Blueprint material report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch blueprint from state }\r\n{set blueprintname to state.blueprint}\r\n\r\n{_ set blueprintname to \"Shielded Kill warrant scanner grade 5\"}\r\n\r\n{if blueprintname:\r\n    {_ Fetch full blueprint details }\r\n    {set blueprint to BlueprintDetails(blueprintname)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'blueprint')}\r\n    {SetState('eddi_context_blueprint_name', blueprintname)}\r\n}\r\n\r\n{if !blueprint:\r\n    {_ Fetch from context }\r\n    {set blueprint to BlueprintDetails(state.eddi_context_blueprint_name)}\r\n}\r\n\r\n{if blueprint:\r\n    {set materials to len(blueprint.materials)}\r\n    {blueprintname} nécessite \r\n    {if materials = 1:\r\n        l'élément {blueprint.materials[0].LocalName}\r\n    |elif materials = 2:\r\n        les éléments {blueprint.materials[0].LocalName} et {blueprint.materials[1].LocalName}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(blueprint.materials):\r\n            {if cur = 0:\r\n                les éléments {blueprint.materials[cur].LocalName}\r\n            |elif cur < len(blueprint.materials) - 1:\r\n                , {blueprint.materials[cur].LocalName}\r\n            |else:\r\n                , et {blueprint.materials[cur].LocalName}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n|else:\r\n    aucune information pour {blueprintname}\r\n}.\r\n",
      "default": false,
      "name": "Blueprint material report",
      "description": "Report on the material requirements for a blueprint"
    },
    "Body report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from Context }\r\n{_ set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n\r\n{set Bodies to []}\r\n {for Bodies in system.bodies:\r\n  {if Bodies.name = state.eddi_context_body_name: {set reportbody to Bodies} }\r\n }\r\n\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n Je ne sais pas de quelle planète vous demandez des données.\r\n\r\n|else:\r\n \r\n    {set QualityRing to event.reserves}\r\n {set NbreRing to len(event.rings)}\r\n {set WithCluster to false}\r\n {set WithRing to false}\r\n {for Rings in event.rings:\r\n  {if find(Rings.name , \"Belt\") >= 0:\r\n   {set WithCluster to true}\r\n  |elif  find(Rings.name , \"Ring\") >= 0:\r\n   {set WithRing to true}\r\n  }\r\n  }\r\n {OneOf(\"{P(reportbody.name)} a\", \"ce corps céleste possède\")}\r\n une gravité de\r\n   {if reportbody.gravity<1 :{round(reportbody.gravity, 2)} \r\n   |else : {round(reportbody.gravity, 1)} \r\n   }Gé,\r\n ce qui est\r\n {if reportbody.gravity < 0.5:\r\n  faible.\r\n |elif reportbody.gravity <2:\r\n  une gravité moyenne.\r\n |elif reportbody.gravity <4:\r\n  plutôt élevé.\r\n |else:\r\n  une gravité extrème.\r\n }\r\n\r\n {if reportbody.tidallylocked:\r\n  {P(reportbody.name)} a une rotation synchrone.\r\n }\r\n\r\n {if reportbody.terraformstate = \"Terraformable\":\r\n  Ce corps céleste est terraformable.\r\n |elif reportbody.terraformstate = \"Terraformed\":\r\n  La planète est terraformée.\r\n }\r\n\r\n{if NbreRing > 0:\r\n Avec {NbreRing} anneau de type\r\n  {set ringcomposition to []}\r\n        {for Ring in reportbody.rings:\r\n   {set ringcomposition to cat(ringcomposition, [Ring.composition])}\r\n        }\r\n        {if len(ringcomposition)= 1:\r\n   {Translate(\"Composition\", ringcomposition[0])}\r\n        |elif len(ringcomposition) = 2:            \r\n   {Translate(\"Composition\", ringcomposition[0])} pour le premier et de \r\n   {Translate(\"Composition\", ringcomposition[1])} pour le second.\r\n        |elif len(ringcomposition) > 2:\r\n            {set cur to 0}\r\n            {while cur < len(reportbody.rings):\r\n                {if cur = 0:                    \r\n     {Translate(\"Composition\", ringcomposition[cur])}\r\n                |elif cur < len(ringcomposition) - 1:\r\n                    , de {Translate(\"Composition\", ringcomposition[cur])}  \r\n                |else:\r\n                    , et de {Translate(\"Composition\", ringcomposition[cur])} pour le dernier\r\n                }\r\n                {set cur to cur + 1}\r\n            }\r\n        }\r\n        {if find(QualityRing , \"Pristine\") >= 0:\r\n            {OneOf(\"et étant inexploités jusqu'à présent\", \"étant vierge de toutes exploitation industrielle\", \"avec une concentration majeure de matière dedans\", \"avec une concentration très richede matière dedans\", \"avec de trés grandes réserves de matière dedans\")} \r\n        |elif find(QualityRing , \"Major\") >= 0:\r\n            {OneOf(\"avec concentrations riche\", \"avec haute concentration\", \"avec un Haut niveau\", \"avec de fortes réserves\", \"avec de grandes réserves\")} de matière dedans\r\n  |elif find(QualityRing , \"Common\") >= 0:\r\n            {OneOf(\"ayant concentrations moyenne de matière dedans\", \"une quantité standard de matière dedans\", \"quelques matières exploitables dedans\")} \r\n  |elif find(QualityRing , \"Low\") >= 0:\r\n            {OneOf(\"peu de matières exploitables dedans\", \"une faible quantité de matière dedans\", \"une faible concentration de matière dedans\")} \r\n  |elif find(QualityRing , \"Depleted\") >= 0:\r\n            {OneOf(\"presque plus de matières exploitables dedans\", \"quelques échantillons de matières dedans\", \"presque plus que de la poussière de matières exploitables dedans\")} \r\n\r\n  }...\r\n    }\r\n\r\n\r\n {if reportbody.planettype = \"Rocky body\":\r\n  C'est un corps rôcheux.\r\n |elif reportbody.planettype = \"High metal content body\":\r\n  C'est un corps de type métallique.\r\n |elif reportbody.planettype = \"Earthlike body\":\r\n  Cette planete est de type tellurique.\r\n |elif reportbody.planettype = \"Metal rich body\":\r\n  C'est un monde riche en métaux.\r\n |elif reportbody.planettype = \"Water world\":\r\n  C'est un monde composé d'eau.\r\n |elif reportbody.planettype = \"Icy body\":\r\n  C'est un corps de glace.\r\n |elif reportbody.planettype = \"Rocky ice body\":\r\n  C'est un corps rôcheux recouvert de glace.\r\n |elif reportbody.planettype = \"Rocky ice world\":\r\n  C'est un monde rôcheux recouvert de glace.\r\n |elif reportbody.planettype = \"Sudarsky class I gas giant\":\r\n  C'est une géante gazeuse de classe un.\r\n |elif reportbody.planettype = \"Sudarsky class II gas giant\":\r\n  C'est une géante gazeuse de classe deux.\r\n |elif reportbody.planettype = \"Sudarsky class III gas giant\":\r\n  C'est une géante gazeuse de classe trois.\r\n |elif reportbody.planettype = \"Sudarsky class IV gas giant\":\r\n  C'est une géante gazeuse de classe quatre.\r\n |elif reportbody.planettype = \"Water giant\":\r\n  C'est une géante composée d'eau.\r\n |elif reportbody.planettype = \"Sudarsky class V gas giant\":\r\n  C'est une géante gazeuse de classe cinq.\r\n |elif reportbody.planettype = \"Gas giant with water based life\":\r\n  C'est une géante gazeuse avec présence de vie basée sur l'eau.\r\n |elif reportbody.planettype = \"Gas giant with ammonia based life\":\r\n  C'est une géante gazeuse avec présence de vie basée sur l'ammoniaque.\r\n |elif reportbody.planettype = \"Ammonia world\":\r\n  C'est un monde composé d'amoniaque.\r\n |else:\r\n  Je ne connais pas encore le type du corps {P(reportbody.planettype)}, merci de penser à me l'intégrer dans ma base après avoir consulté le fichier logue.\r\n }\r\n\r\n {if reportbody.terraformstate = \"Terraforming\":\r\n  On est en plein procéssuss de térraformation.\r\n }\r\n\r\n L'atérissage y est\r\n\r\n {if reportbody.landable:\r\n  possible\r\n |else:\r\n  impossible actuellement\r\n }\r\n .\r\n\r\n\r\n\r\n {_ Atmosphere? }\r\n\r\n {_ Volcanism}\r\n {if reportbody.volcanism.type = \"Magma\":\r\n  Il y a\r\n  {if reportbody.volcanism.amount = Major:\r\n   {OneOf(\"de nombreuses\", \"quantité de\", \"beaucoup de\")}\r\n  |elif reportbody.volcanism.amount = Minor:\r\n   {OneOf(\"quelques\", \"ici et là, des\", \"peu de\")}\r\n  }\r\n  coulées de lave de\r\n  {set translate to reportbody.volcanism.composition} {F(\"Translate Element\")}\r\n  sur la surface.\r\n |elif reportbody.volcanism.type = \"Geysers\":\r\n  Il y a\r\n  {if reportbody.volcanism.amount = \"Major\":\r\n   {OneOf(\"de nombreux\", \"quantités de\", \"beaucoup de\")}\r\n  |elif reportbody.volcanism.amount = \"Minor\":\r\n   {OneOf(\"quelques\", \"des\", \"peu de\")}\r\n  |elif reportbody.volcanism.amount = []:\r\n   des\r\n  }\r\n  gésers {set translate to reportbody.volcanism.composition}\r\n{\r\nif StartsWithVowel(F(\"Translate Element\")): d'{F(\"Translate Element\")} |else : de {F(\"Translate Element\")}}\r\n  {OneOf(\"détecté\", \"présent\")} sur la surface.\r\n }\r\n\r\n {if reportbody.landable :\r\n   la rotation\r\n  {if reportbody.rotationalperiod <= 0.5:\r\n   rapide\r\n  |elif reportbody.rotationalperiod > 20.0:\r\n   lente\r\n  }\r\n  s'étale sur une période de {round(reportbody.rotationalperiod,2)} jours.\r\n\r\n  {set goodmaterials to []}\r\n  {set greatmaterials to []}\r\n  {for material in reportbody.materials:\r\n   {if material.percentage >= MaterialDetails(material.material).greatpctbody:\r\n    {set greatmaterials to cat(greatmaterials, [material])}\r\n   |elif material.percentage >= MaterialDetails(material.material).goodpctbody:\r\n    {set goodmaterials to cat(goodmaterials, [material])}\r\n   }\r\n  }\r\n\r\n  {if len(greatmaterials) > 0:\r\n   Cette planète a une forte concentration de minerai:...\r\n   {if len(greatmaterials) = 1:\r\n      {Translate(\"Element\", greatmaterials[0].material)}\r\n    avec un taux de {round(greatmaterials[0].percentage, 1)} pour cent\r\n   |elif len(greatmaterials) = 2:\r\n    {Translate(\"Element\", greatmaterials[0].material)}\r\n    avec {round(greatmaterials[0].percentage, 1)} pour cent ainsi que \r\n    {Translate(\"Element\", greatmaterials[1].material)}\r\n    avec {round(greatmaterials[1].percentage,1)} pour cent\r\n   |else:\r\n    {set cur to 0}\r\n    {while cur < len(greatmaterials):\r\n     {if cur = 0:\r\n      {round(greatmaterials[cur].percentage, 1)} pour cent en\r\n      {Translate(\"Element\", greatmaterials[cur].material)}\r\n     |elif cur < len(greatmaterials) - 1:\r\n      , ainsi que {round(greatmaterials[cur].percentage, 1)} pour cent en\r\n      {Translate(\"Element\", greatmaterials[cur].material)}\r\n     |else:\r\n      , et finalement {round(greatmaterials[cur].percentage, 1)} pour cent en\r\n      {Translate(\"Element\", greatmaterials[cur].material)}\r\n     }\r\n     {set cur to cur + 1}\r\n    }\r\n   }\r\n  }.\r\n  \r\n  {if len(goodmaterials) > 0:\r\n   {if len(greatmaterials) > 0:\r\n    Ainsi que de bonnes concentrations en :\r\n   |else:\r\n    Cette planète a de bonnes concentrations de\r\n   }\r\n   {if len(goodmaterials) = 1:\r\n   {Translate(\"Element\", goodmaterials[0].material)}\r\n    avec {round(goodmaterials[0].percentage, 1)} pourcent.\r\n   |elif len(goodmaterials) = 2:\r\n   {Translate(\"Element\", goodmaterials[0].material)}\r\n    avec {round(goodmaterials[0].percentage, 1)} pourcent et aussi \r\n    {Translate(\"Element\", goodmaterials[1].material)}\r\n avec {round(goodmaterials[1].percentage, 1)} pourcent.\r\n   |else:\r\n    {set cur to 0}\r\n    {while cur < len(goodmaterials):\r\n     {if cur = 0:\r\n  {Translate(\"Element\", goodmaterials[cur].material)}\r\n      avec {round(goodmaterials[cur].percentage, 1)} pourcent\r\n     |elif cur < len(goodmaterials) - 1:\r\n      , ainsi que {Translate(\"Element\", goodmaterials[cur].material)}\r\n   avec {round(goodmaterials[cur].percentage, 1)} pourcent\r\n     |else:\r\n      , et finalement {Translate(\"Element\", goodmaterials[cur].material)}\r\n   avec {round(goodmaterials[cur].percentage, 1)} pourcent.\r\n     }\r\n     {set cur to cur + 1}\r\n    }\r\n   }\r\n  }\r\n  {if len(greatmaterials) > 0 || len(goodmaterials) > 0:\r\n   .\r\n  |else:\r\n   Quantités des matériaux présents en dessous ou dans la moyenne.\r\n  }\r\n\r\n }\r\n}...\r\n\r\n",
      "default": false,
      "name": "Body report",
      "description": "Function to report on the details of the contextual body"
    },
    "Body scanned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'body')}\r\n{SetState('eddi_context_last_action', 'scan')}\r\n{SetState('eddi_context_body_system', system.name)}\r\n{SetState('eddi_context_body_name', event.name)}\r\n\r\n{Pause(1000)}\r\n\r\nScan {Occasionally(3,  \"of body\")} {OneOf(\"complete\", \"completed\", \"finished\")}.\r\n\r\n{F(\"Body report\")}\r\n\r\n{if event.estimatedvalue:\r\n   Valeur estimée {OneOf(\"du scann\", \"de l'étude\", \"du sondage\")}: {event.estimatedvalue} crédits\r\n}",
      "default": false,
      "name": "Body scanned",
      "description": "Triggered when you complete a scan of a planetary body"
    },
    "Bond awarded": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bond')}\r\n{SetState('eddi_context_last_action', 'award')}\r\n{SetState('eddi_context_bond_amount', event.reward)}\r\n{SetState('eddi_context_bond_faction', event.awardingfaction)}\r\n\r\n {OneOf('vous recevez','vous aves reçu','arrivée de ')}\r\n {event.reward} \r\n {OneOf('crédits en banque','crédits dans votre compte','crtedits pour vos grands efforts')}.",
      "default": false,
      "name": "Bond awarded",
      "description": "Triggered when you are awarded a combat bond"
    },
    "Bond redeemed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bond')}\r\n{SetState('eddi_context_last_action', 'redeem')}\r\n{SetState('eddi_context_bond_amount', event.amount)}\r\n\r\nRécompance de combat de {Humanise(event.amount)} crédits encaissé\r\n{Occasionally(2, \"\r\n {if len(event.rewards) = 1:\r\n  par {P(event.rewards[0].faction)}\r\n |else:\r\n  par\r\n  {set cur to 0}\r\n  {while cur < len(event.rewards):\r\n   {if cur = 0:\r\n   |elif cur < len(event.rewards) - 1:\r\n    ,\r\n   |else:\r\n    et\r\n   }\r\n   {P(event.rewards[cur].faction)}\r\n   {set cur to cur + 1}\r\n  }\r\n }\r\n\")}.",
      "default": false,
      "name": "Bond redeemed",
      "description": "Triggered when you redeem a combat bond"
    },
    "Bounty awarded": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bounty')}\r\n{SetState('eddi_context_last_action', 'award')}\r\n{SetState('eddi_context_bounty_name', event.target)}\r\n{SetState('eddi_context_bounty_faction', event.faction)}\r\n{SetState('eddi_context_bounty_amount', event.reward)}\r\n\r\n{Pause(500)}\r\n{if len(event.rewards) = 1:\r\n    Récompense de {Humanise(event.reward)} crédits reçu par {P(event.rewards[0].faction)}\r\n|elif len(event.rewards) > 1:\r\n    Reçu un total de {Humanise(event.reward)} crédits sur  {len(event.rewards)}  récompenses\r\n    {Occasionally(2, \" par {set cur to 0} {while cur < len(event.rewards): {if cur = 0:  |elif cur < len(event.rewards) - 1:, |else: , et} {P(event.rewards[cur].faction)} {set cur to cur + 1}}\")}.\r\n    {if event.shared: à partager avec vos compagnons de vol}.\r\n}",
      "default": false,
      "name": "Bounty awarded",
      "description": "Triggered when you are awarded a bounty"
    },
    "Bounty incurred": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bounty')}\r\n{SetState('eddi_context_last_action', 'incur')}\r\n{SetState('eddi_context_bounty_name', event.victim)}\r\n{SetState('eddi_context_bounty_faction', event.faction)}\r\n{SetState('eddi_context_bounty_amount', event.bounty)}\r\n\r\n{P(event.faction)} vous recherche, votre tête est mise à pris pour {event.bounty} crédits pour le crime commis sur {event.victim} par {event.LocalCrime}.\r\n\r\n",
      "default": false,
      "name": "Bounty incurred",
      "description": "Triggered when you incur a bounty"
    },
    "Bounty redeemed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bounty')}\r\n{SetState('eddi_context_last_action', 'redeem')}\r\n{SetState('eddi_context_bounty_amount', event.amount)}\r\n\r\n\r\nLes primes récoltés vous raportent {Humanise(event.amount)} de crédits \r\n\r\n{Occasionally(2, \"\r\n{if len(event.rewards) = 1:\r\n     de la part de{P(event.rewards[0].faction)}\r\n|else:\r\n    par\r\n   {set cur to 0}\r\n   {while cur < len(event.rewards):\r\n      {if cur = 0:\r\n      |elif cur < len(event.rewards) - 1:\r\n         ,\r\n      |else:\r\n         et\r\n      }\r\n   {P(event.rewards[cur].faction)}\r\n   {set cur to cur + 1}\r\n   }\r\n}\r\n\")}.",
      "default": false,
      "name": "Bounty redeemed",
      "description": "Triggered when you redeem a bounty voucher"
    },
    "Cargo inventory": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "\r\n{set Cargo to []}\r\n{set Total to 0}\r\n{for transport in ship.cargo:\r\n    {set Cargo to cat(Cargo, [transport])}\r\n {set Total to Total + Cargo.commodity.amount}\r\n}\r\n\r\n\r\n{if len(ship.cargo)<1: vous ne transportez aucune marchandise\r\n|elif len(ship.cargo) = 1:\r\n    vous transportez {Cargo[0].amount} {OneOf(\"tones\", \"unités\")} de {Cargo[0].commodity.LocalName}\r\n|else:\r\n    Vous transportez {Total} tonnes de marchandises dont:\r\n    {set cur to 0}\r\n    {while cur < len(event.rewards):\r\n       {if cur = 0: \r\n       |elif cur < len(event.rewards) - 1:, \r\n       |else: et \r\n   \r\n       {Cargo[cur].amount} {OneOf(\"tones\", \"unités\")} de {Cargo[cur].commodity.LocalName}\r\n    {if Cargo[cur].stolen: volé}\r\n       {set cur to cur + 1}\r\n       }\r\n    }\r\n}",
      "default": false,
      "name": "Cargo inventory",
      "description": "Triggered when you obtain an inventory of your cargo"
    },
    "Cleared save": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'save')}\r\n{SetState('eddi_context_last_action', 'clear')}\r\n\r\nAu revoir {F(\"Honorific\")}. Ce fut un plaisir de vous servir.",
      "default": false,
      "name": "Cleared save",
      "description": "Triggered when you clear your save"
    },
    "Cockpit breached": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{_SetState('eddi_context_last_subject', 'cockpit')}\r\n{_SetState('eddi_context_last_action', 'breach')}\r\n\r\n{OneOf('Cest moi, ou il fait froit ici?','Bon, jespère que vous savez où est votre casque!','Brêche détecté, cest le moment de sassurer de votre réserve doxygène')}.",
      "default": false,
      "name": "Cockpit breached",
      "description": "Triggered when your ship's cockpit is broken"
    },
    "Combat promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'rank')}\r\n{SetState('eddi_context_last_action', 'promotion')}\r\n{SetState('eddi_context_rank_name', 'combat')}\r\n{SetState('eddi_context_rank_amount', event.rating)}\r\n\r\n{OneOf(\"Vos compétances aux combats sont reconnues dans toute la galaxie, vous êtes prommu au rang \",\"Vous êtes reconnu pour vos compétences de combat, vous prennez le grade de:\")} {event.LocalRating}",
      "default": false,
      "name": "Combat promotion",
      "description": "Triggered when your combat rank increases"
    },
    "Commander continued": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Bienvenue\",\"Bonjour\",\"Je suis heureux de vous revoir\")} {F(\"Honorific\")}.",
      "default": false,
      "name": "Commander continued",
      "description": "Triggered when you continue an existing game"
    },
    "Commander progress": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ non utilisé actuellement}\r\n{_ variables possibles : les pourcentages dans les différent rangs}\r\n\r\n{_ par exemple event.combat vous donnera le % que vous avez dans votre rang actuel}\r\n{_ 100-(event.combat) cauq qu'il vous reste à parcourir pour monter de rang}\r\n\r\n",
      "default": false,
      "name": "Commander progress",
      "description": "Triggered when your progress is reported"
    },
    "Commander ratings": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ non utilisé actuellement}\r\n{_ mise à jours de tous les rangs}\r\n{_ les variables sont les obget des différents rang}\r\n\r\n{_ par exemple event.combat.LocalName vous donnera le nom de votre rang actuel}\r\n{_ par exemple event.combat.rank vous donnera le numéro de votre rang actuel}\r\n\r\n",
      "default": false,
      "name": "Commander ratings",
      "description": "Triggered when your ratings are reported"
    },
    "Commander started": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Bienvenu, Commandeur.",
      "default": false,
      "name": "Commander started",
      "description": "Triggered when you start a new game"
    },
    "Commodity collected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'collect')}\r\n{SetState('eddi_context_cargo_name', event.commodity)}\r\n\r\n\r\n\r\nL'unité de marchandise :\r\n{event.LocalCommodity}, {OneOf(\"viens d'être chargé.\",\"est arimée dans la soute\")}.",
      "default": false,
      "name": "Commodity collected",
      "description": "Triggered when you pick up a commodity in your ship or SRV"
    },
    "Commodity ejected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'eject')}\r\n{SetState('eddi_context_commodity_name', event.commodity)}\r\n\r\nL'unité de marchandise :\r\n{event.LocalCommodity}, est bien éjectée.",
      "default": false,
      "name": "Commodity ejected",
      "description": "Triggered when you eject a commodity from your ship or SRV"
    },
    "Commodity purchase check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{for commodity in station.commodities:\r\n {if commodity.stock > 0 && commodity.buyprice < commodity.avgprice:\r\n  {set discount to commodity.avgprice - commodity.buyprice}\r\n  {if discount > best.avgprice - best.buyprice:\r\n   {set thirdbest to secondbest}\r\n   {set secondbest to best}\r\n   {set best to commodity}\r\n  |elif discount > secondbest.avgprice - secondbest.buyprice:\r\n   {set thirdbest to secondbest}\r\n   {set secondbest to commodity}\r\n  |elif discount > thirdbest.avgprice - thirdbest.buyprice:\r\n   {set thirdbest to commodity}\r\n  }\r\n }\r\n}\r\n\r\n{if best:\r\n Le marché local vent le {best.LocalName} à un bon prix\r\n {if secondbest\r\n  , ainsi que {secondbest.LocalName} \r\n  {if thirdbest:\r\n   et {thirdbest.LocalName} \r\n  }\r\n }\r\n.}",
      "default": false,
      "name": "Commodity purchase check",
      "description": "Check to see which commodities are the best to purchase"
    },
    "Commodity purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'purchase')}\r\n{SetState('eddi_context_commodity_name', event.commodity)}\r\n{SetState('eddi_context_commodity_amount', event.amount)}\r\n\r\n{if event.amount = 1:\r\nVous venez d'acheter une unitée de {event.LocalCommodity} pour {event.price} crédits.\r\n|elif event.amount > 1:\r\nVous venez d'acheter {event.amount} unitées de {event.LocalCommodity} pour un cout de {event.price} crédits l'unité. Le coût total est donc de {event.amount * event.price} crédits.\r\n}",
      "default": false,
      "name": "Commodity purchased",
      "description": "Triggered when you buy a commodity from the markets"
    },
    "Commodity refined": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'refine')}\r\n{SetState('eddi_context_commodity_name', event.commodity)}\r\n\r\nUne {OneOf('unité','tonne')} de minerai {event.LocalCommodity} a été raffiné.",
      "default": false,
      "name": "Commodity refined",
      "description": "Triggered when you refine a commodity from the refinery"
    },
    "Commodity sale check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to find a given commodity in market}\r\n{set market(commodity) to:\r\n    {for marketcommodity in station.commodities:\r\n        {if marketcommodity.EDDBID = commodity.EDDBID:\r\n            {return marketcommodity}\r\n        }\r\n    }\r\n}\r\n\r\n{set totalprofit to 0}\r\n{set profitablecommodities to []}\r\n{set stolencommodities to []}\r\n{set unknowncommodities to []}\r\n\r\n{for cargo in ship.cargo:\r\n    {if cargo.commodity.name != 'Limpet':\r\n        {set marketcommodity to market(cargo.commodity)}\r\n        {if !marketcommodity:\r\n            {_ We have no market information for this commodity.  Add it to the list of unknowns }\r\n            {set unknowncommodities to cat(unknowncommodities, [cargo.commodity])}\r\n        }\r\n        {set profit to (marketcommodity.sellprice - cargo.price) * cargo.amount}\r\n        {if cargo.stolen = true:\r\n            {set stolencommodities to cat(stolencommodities, [cargo.commodity])}\r\n        |elif cargo.missionid:\r\n            {_ don't do anything with mission cargo at the moment}\r\n        |elif marketcommodity && profit > 0:\r\n            {set profitablecommodities to cat(profitablecommodities, [cargo.commodity])}\r\n            {set totalprofit to totalprofit + profit}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Let the user know about any commodities they can sell here for a profit}\r\n{if len(profitablecommodities) > 0:\r\n    Vous pouvez vendre vos\r\n    {if len(profitablecommodities) = 1:\r\n        {set translate to profitablecommodities[0].name} {F(\"Translate Commodities\")}\r\n    |elif len(profitablecommodities) = 2:\r\n        {set translate to profitablecommodities[0].name} {F(\"Translate Commodities\")} et {set translate to profitablecommodities[1].name} {F(\"Translate Commodities\")}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(profitablecommodities):\r\n            {if cur = 0:\r\n                {set translate to profitablecommodities[cur].name} {F(\"Translate Commodities\")}\r\n            |elif cur < len(profitablecommodities) - 1:\r\n                , {set translate to profitablecommodities[cur].name} {F(\"Translate Commodities\")}\r\n            |else:\r\n                , et {set translate to profitablecommodities[cur].name} {F(\"Translate Commodities\")}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n    pour un profit de {totalprofit} crédits.\r\n}\r\n\r\n{_ Let the user know about any commodities about which we are unsure if they can sell for a profit}\r\n{if len(unknowncommodities) > 0:\r\n    Vous pourriez {if len(profitablecommodities) > 0: aussi } vendre vos\r\n    {if len(unknowncommodities) = 1:\r\n  {set translate to unknowncommodities[0].name} {F(\"Translate Commodities\")}        \r\n    |elif len(unknowncommodities) = 2:\r\n        {set translate to unknowncommodities[0].name} {F(\"Translate Commodities\")}  and {set translate to unknowncommodities[1].name} {F(\"Translate Commodities\")} \r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(unknowncommodities):\r\n            {if cur = 0:\r\n                {set translate to unknowncommodities[cur].name} {F(\"Translate Commodities\")} \r\n            |elif cur < len(profitablecommodities) - 1:\r\n                , {set translate to unknowncommodities[cur].name} {F(\"Translate Commodities\")}\r\n            |else:\r\n                , et {set translate to unknowncommodities[cur].name} {F(\"Translate Commodities\")}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n    , testez aussi les profits pottentiels pour {if len(unknowncommodities) > 1: tout cela |else: ceci} avant de clore vos transactions.\r\n}\r\n\r\n{_ Let the user know about any stolen commodities they can sell on the black market}\r\n{if len(stolencommodities) > 0:\r\n    {if station.hasblackmarket:\r\n        Vous pouvez {OneOf('décharger', 'vider', 'vendre')} vos marchandises volées\r\n        {if len(stolencommodities) = 1:\r\n            {stolencommodities[0].LocalName}\r\n        |elif len(stolencommodities) = 2:\r\n            {stolencommodities[0].LocalName} et {set translate to stolencommodities[1].LocalName}\r\n        |else:\r\n            {set cur to 0}\r\n            {while cur < len(stolencommodities):\r\n                {if cur = 0:\r\n                    {stolencommodities[cur].LocalName}\r\n                |elif cur < len(stolencommodities) - 1:\r\n                    , {stolencommodities[cur].LocalName}\r\n                |else:\r\n                    , {stolencommodities[cur].LocalName}\r\n                }\r\n                {set cur to cur + 1}\r\n            }\r\n        }\r\n        ici.\r\n    |else:\r\n        Note: vous {OneOf(\"avez une cargaison volée en soute\", \"avez des biens volés à bord\", \"transportez des marchandises volées\", \"transportez une cargaison volée\")}.\r\n    }\r\n}",
      "default": false,
      "name": "Commodity sale check",
      "description": "Check to see which commodities can be sold here"
    },
    "Commodity sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'sell')}\r\n{SetState('eddi_context_commodity_name', event.commodity)}\r\n{SetState('eddi_context_commodity_amount', event.amount)}\r\n\r\n{if event.amount = 1:\r\nVous venez de vendre une unité de {event.LocalCommodity} pour {event.price} crédits\r\n|elif event.amount > 1:\r\nVous venez de vendre {event.amount} unités de{event.LocalCommodity}   à {event.price} crédits par l'unité. La valeur totale est de {event.amount * event.price} crédits\r\n}\r\n{if event.profit < 0:\r\navec une perte de {-1 * event.profit * event.amount} crédits.\r\n|elif event.profit = 0:\r\nvous n'avez pas fait de profit, vous avez revendu au prix d'achat.\r\n|else:\r\navec un profit de {event.profit * event.amount} crédits.\r\n}",
      "default": false,
      "name": "Commodity sold",
      "description": "Triggered when you sell a commodity to the markets"
    },
    "Community goal": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Set Context _}\r\n{SetState('eddi_context_last_subject', 'community goal')}\r\n{_ Save goal location to context if there is only one goal present _}\r\n{if len(event.cgid) = 1:\r\n   {SetState('eddi_context_goal_system_name', event.system[0])}\r\n   {SetState('eddi_context_goal_station_name', event.station[0])}\r\n}\r\n\r\n{F('Honorific')}, \r\n\r\n{if len(event.name) > 1:\r\n    {OneOf(\"you have expressed interest in\", \"I am tracking\")}\r\n    the following community goals:\r\n|else: \r\n    The community goal,    \r\n}\r\n\r\n{set cur to 0}\r\n{while cur < len(event.name):\r\n\r\n   {if cur = 0 && len(event.name) = 1:\r\n      {_ nothing _}\r\n   |elif cur = 0 && len(event.name) > 1:\r\n      The first,\r\n   |elif cur < (len(event.name) - 1):\r\n      The next, \r\n   |else:\r\n      The last,\r\n   }\r\n\r\n   {event.name[cur]},\r\n\r\n   {if event.iscomplete[cur]:\r\n      {OneOf(\"is complete\", \"has finished\")} \r\n   |else: \r\n      {if (event.expiry[cur] / 3600) < 12:\r\n         {OneOf(\"is nearing completion\", \r\n                \"shall end in {Humanise(round(event.expiry[cur] / 3600, 1))} hours\", \r\n                \"is nearly complete\")}\r\n      |else:\r\n         {OneOf(\"is not yet complete\", \r\n                \"is active\", \r\n                \"is incomplete\")} \r\n      }\r\n   }\r\n\r\n   {if event.tier[cur]:\r\n       {OneOf(\"and has reached\", \"and currently at\")} {event.tier[cur]}.\r\n       {if event.contribution[cur] > 0:\r\n           Your expected reward is \r\n           {Occasionally(2, \"currently\")}\r\n           {Occasionally(2, \"calculated at\")}\r\n           {Humanise(event.tierreward[cur])} credits\r\n           {Occasionally(2, \"in the {event.percentileband[cur]}th percentile\")}\r\n       }\r\n   }.\r\n\r\n   {_ Create a comparison function _}\r\n   {set compare(stat) to:     \r\n       {if stat < 0.01:\r\n            just a {OneOf(\"fraction\", \"token\")} of            \r\n       |elif stat < 0.10:\r\n            less than a tenth of\r\n       |elif stat < 0.25:\r\n            less than a quarter of\r\n       |elif stat < 0.5:\r\n            less than half of\r\n       |elif stat < 0.75:\r\n            less than\r\n       |elif stat < 0.96: \r\n            {OneOf(\"fractionally\",\"just\")}\r\n            less than\r\n       |elif stat < 1.05:\r\n            {OneOf(\"approximately\",\"roughly\",\"nearly\")} \r\n            equal to \r\n       |elif stat < 1.25:\r\n            a little more than\r\n       |elif stat < 1.5:\r\n            more than\r\n       |elif stat < 2:\r\n            significantly more than\r\n       |else:\r\n            vastly more than\r\n       }\r\n    }\r\n    {set compare_contribution to (event.contribution[cur] / round(event.total[cur] / event.contributors[cur], 0))}\r\n\r\n    {if compare_contribution != 0:\r\n       {if event.toprank[cur]: \r\n          Congratulations! \r\n          You are one of {event.topranksize[cur]} top commanders in this event, having contributed \r\n          {compare(compare_contribution)}\r\n          the average.\r\n       |else:\r\n          {Occasionally(2, \"You have contributed \r\n          {compare(compare_contribution)}\r\n          the average.\")}\r\n       }\r\n    }\r\n\r\n    {if !event.iscomplete[cur]:\r\n       You may \r\n       {if event.contribution[cur] > 0: \r\n          {OneOf(\"contribute more\", \"make additional contributions\")} \r\n       |else: \r\n          {OneOf(\"contribute\", \"make a contribution\")}\r\n       }\r\n       {if event.station[cur] = station.name:\r\n          {Occasionally(2, \"here\")}\r\n          {Occasionally(2, \"at this station\")}.\r\n       |elif event.system[cur] = system.name:\r\n          at {P(event.station[cur])}\r\n          {Occasionally(2, \"here\")}\r\n          {Occasionally(2, \"in this system\", \"in the current system\")}.\r\n       |else:\r\n          at {P(event.station[cur])},\r\n          in {OneOf(\"{P(event.system[cur])}\", \"the {P(event.system[cur])} system\" )}.\r\n       }\r\n    }\r\n\r\n    {set cur to cur + 1}\r\n    {Pause(1000)}\r\n}",
      "default": true,
      "name": "Community goal",
      "description": "Triggered when checking the status of a community goal"
    },
    "Controlling fighter": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"liaison radio\", \"liaison\", \"contact\")} {Occasionally(2, \"avec le chasseur\")} {OneOf(\"initialisée\", \"établie\", \"activé\")}.",
      "default": false,
      "name": "Controlling fighter",
      "description": "Triggered when you switch control from your ship to your fighter"
    },
    "Controlling ship": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set Choix1A to OneOf(\"Contact\", \"Liaison\", \"Liaison radio\")}\r\n{set Choix1 to \"{Choix1A} {OneOf(' terminé.', ' fermé.')}\"}\r\n{set Choix2A to OneOf(\"reprise de contrôle du\", \"retour aux commandes du\", \"Retour à la barre du\")}\r\n{set Choix2 to \"{Choix2A} {OneOf(' vaisseau mêre', ship.name, ship.ident)}\"}\r\n\r\n {OneOf(Choix1, Choix2)}",
      "default": false,
      "name": "Controlling ship",
      "description": "Triggered when you switch control from your fighter to your ship"
    },
    "Convertir en Celsius": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ set convertir to 0}\r\n\r\n\r\n{set Convertion to (convertir -273.15)}\r\n\r\n{if Convertion: {Convertion} |else: {convertir}}\r\n\r\n",
      "default": false,
      "name": "Convertir en Celsius",
      "description": "convertir les degrés  kelvin en celsius"
    },
    "Crew assigned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.role = \"Active\":\r\n{event.name} Est maintenant en service actif.\r\n|else:\r\n{event.name} Viens de démissionner de son poste.\r\n}",
      "default": false,
      "name": "Crew assigned",
      "description": "Triggered when you assign crew"
    },
    "Crew fired": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'fire')}\r\n{SetState('eddi_context_crew_name', event.name)}\r\n\r\n{event.name} a été {OneOf(\"renvoyé\", \"viré\", \"retiré de l'équipage\")}.",
      "default": false,
      "name": "Crew fired",
      "description": "Triggered when you fire crew"
    },
    "Crew hired": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'hire')}\r\n{SetState('eddi_context_crew_name', event.name)}\r\n\r\n{event.name} à rejoint le service pour sa faction.",
      "default": false,
      "name": "Crew hired",
      "description": "Triggered when you hire crew"
    },
    "Crew joined": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'join')}\r\n{SetState('eddi_context_crew_name', event.captain)}\r\n\r\nVous avez rejoint l'équipage du {event.captain}",
      "default": false,
      "name": "Crew joined",
      "description": "Triggered when you join a crew"
    },
    "Crew left": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'leave')}\r\n{SetState('eddi_context_crew_name', event.captain)}\r\n\r\nVous avez quitté l'équipe de {event.captain}.",
      "default": false,
      "name": "Crew left",
      "description": "Triggered when you leave a crew"
    },
    "Crew member joined": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'join')}\r\n{SetState('eddi_context_crew_name', event.crew)}\r\n\r\n\r\n{event.crew} has joined your crew.",
      "default": false,
      "name": "Crew member joined",
      "description": "Triggered when a commander joins your crew"
    },
    "Crew member launched": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'launch')}\r\n{SetState('eddi_context_crew_name', event.crew)}\r\n\r\n\r\n{event.crew} prend les commande d'un chasseur.",
      "default": false,
      "name": "Crew member launched",
      "description": "Triggered when a crew member launches the fighter"
    },
    "Crew member left": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'leave')}\r\n{SetState('eddi_context_crew_name', event.crew)}\r\n\r\n{event.crew} viens de quitter l'équipe.",
      "default": false,
      "name": "Crew member left",
      "description": "Triggered when a commander leaves your crew"
    },
    "Crew member removed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'remove')}\r\n{SetState('eddi_context_crew_name', event.crew)}\r\n\r\n\r\nVous avez sorti {event.crew} de votre équipe.",
      "default": false,
      "name": "Crew member removed",
      "description": "Triggered when you remove a commander from your crew"
    },
    "Crew member role changed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'role')}\r\n{SetState('eddi_context_crew_name', event.crew)}\r\n{SetState('eddi_context_crew_role', event.role)}\r\n\r\n{if event.role = 'Idle':\r\n    {event.crew} is no longer manning a position\r\n|elif event.role = 'Fighter':\r\n    {event.crew} is now manning the fighter\r\n|elif event.role = 'Gunner':\r\n    {event.crew} is now manning the guns\r\n}.\r\n",
      "default": true,
      "name": "Crew member role change",
      "description": "Triggered when a crew member changes their role"
    },
    "Crew role changed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.role = 'Gunner':\r\nVous êtes maintenant l'artilleur de cette équipe.\r\n|elif event.role = 'Fighter':\r\nVous êtes maintenant le pilote de chasse de cette équipe.\r\n|elif event.role = 'Idle':\r\nVous n'avez pas été affecté au service actif.\r\n}",
      "default": false,
      "name": "Crew role changed",
      "description": "Triggered when your role in the crew changes"
    },
    "Damage check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Track if there is any damage}\r\n{set damaged to 0}\r\n\r\n{_ Announce hull health}\r\n{if ship.health < 100:\r\n Coque à {Humanise(ship.health)}pourcent.\r\n {set damaged to 1}\r\n}\r\n\r\n{_ en premier la liste des modules critiques}\r\n\r\n{set minordamage to []}\r\n{set majordamage to []}\r\n\r\n{if ship.powerplant.health < 60:\r\n {set majordamage to cat(majordamage, [ship.powerplant])}\r\n|elif ship.powerplant.health < 100:\r\n {set minordamage to cat(minordamage, [ship.powerplant])}\r\n}\r\n\r\n{if ship.thrusters.health < 60:\r\n {set majordamage to cat(majordamage, [ship.thrusters])}\r\n|elif ship.thrusters.health < 100:\r\n {set minordamage to cat(minordamage, [ship.thrusters])}\r\n}\r\n\r\n{if ship.frameshiftdrive.health < 60:\r\n {set majordamage to cat(majordamage, [ship.frameshiftdrive])}\r\n|elif ship.frameshiftdrive.health < 100:\r\n {set minordamage to cat(minordamage, [ship.frameshiftdrive])}\r\n}\r\n\r\n{if ship.powerdistributor.health < 60:\r\n {set majordamage to cat(majordamage, [ship.powerdistributor])}\r\n|elif ship.powerdistributor.health < 100:\r\n {set minordamage to cat(minordamage, [ship.powerdistributor])}\r\n}\r\n\r\n{if ship.lifesupport.health < 60:\r\n {set majordamage to cat(majordamage, [ship.lifesupport])}\r\n|elif ship.lifesupport.health < 100:\r\n {set minordamage to cat(minordamage, [ship.lifesupport])}\r\n}\r\n\r\n{if ship.sensors.health < 60:\r\n {set majordamage to cat(majordamage, [ship.sensors])}\r\n|elif ship.sensors.health < 100:\r\n {set minordamage to cat(minordamage, [ship.sensors])}\r\n}\r\n\r\n{if len(majordamage) > 0:\r\n {set damaged to 1}\r\n Dégats critiques sur\r\n {if len(majordamage) = 1:\r\n  {majordamage[0].LocalName}\r\n |elif len(majordamage) = 2:\r\n  {set translate to majordamage[0].LocalName} et {majordamage[1].LocalName} \r\n |else:\r\n  {set cur to 0}\r\n  {while cur < len(majordamage):\r\n   {if cur = 0:\r\n    {majordamage[cur].LocalName}\r\n   |elif cur < len(majordamage) - 1:\r\n    , {majordamage[cur].LocalName} \r\n   |else:\r\n    ,et {majordamage[cur].LocalName} \r\n   {set cur to cur + 1}\r\n   }\r\n  }.\r\n }\r\n}\r\n\r\n{if len(minordamage) > 0:\r\n {set damaged to 1}\r\n Dégât minime\r\n {if len(minordamage) = 1:\r\n  {minordamage[0].LocalName}\r\n |elif len(minordamage) = 2:\r\n  {minordamage[0].LocalName} et {minordamage[1].LocalName}\r\n |else:\r\n  {set cur to 0}\r\n  {while cur < len(minordamage):\r\n   {if cur = 0:\r\n    {minordamage[cur].LocalName}\r\n   |elif cur < len(minordamage) - 1:\r\n    , {minordamage[cur].LocalName} \r\n   |else:\r\n    ,et  {minordamage[cur].LocalName} \r\n   }\r\n   {set cur to cur + 1}\r\n  }\r\n }.\r\n}\r\n\r\n\r\n{_ liste des modules secaondaires}\r\n\r\n{set minordamage to []}\r\n{set majordamage to []}\r\n\r\n\r\n{for compartment in ship.compartments:\r\n {if compartment.module.health < 60:\r\n  {set majordamage to cat(majordamage, [compartment.module.LocalName])}\r\n |elif hardpoint.module.health < 100:\r\n  {set minordamage to cat(minordamage, [compartment.module.LocalName])}\r\n }\r\n}\r\n\r\n{for hardpoint in ship.hardpoints:\r\n {if hardpoint.module.health < 60:\r\n  {set majordamage to cat(majordamage, [hardpoint.module.LocalName])}\r\n |elif hardpoint.module.health < 100:\r\n  {set minordamage to cat(minordamage, [hardpiont.module.LocalName])}\r\n }\r\n}\r\n\r\n{if len(majordamage) > 0:\r\n{set damaged to 1}\r\n {if len(majordamage) = 1:\r\n  Un autre élément du vaisseau avec des dégâts majeurs\r\n |elif len(majordamage) > 1:\r\n  {len(majordamage)} autres élément du vaisseau avec des dégâts majeurs\r\n }\r\n {if len(minordamage) = 1:\r\n  et un autre élément du vaisseau avec des dégâts mineurs\r\n |elif len(minordamage) > 1:\r\n  et {len(minordamage)} autres élément du vaisseau avec des dégâts mineurs\r\n }.\r\n|elif len(minordamage) = 1:\r\n  {set damaged to 1}\r\n Un autre élément du vaisseau avec des dégâts mineurs.\r\n|elif len(minordamage) > 1:\r\n {set damaged to 1}\r\n {len(minordamage)} autres éléments du navire avec des dommages mineurs.\r\n}\r\n\r\n{if damaged = 0:\r\n {OneOf(\"Tout les système sont pleinement opérationel.\", \"{ShipName()} est pleinement opérationel.\", \"{ShipName()} est en bon état.\")}\r\n}",
      "default": false,
      "name": "Damage check",
      "description": "Check on the levels of damage to your ship"
    },
    "Data scanned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Data scanned }\r\n{_ Triggered when scanning some types of data links }\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'scan')}\r\n{SetState('eddi_context_last_action', 'data')}\r\n{SetState('eddi_context_data_scan_type', event.datalinktype)}\r\n\r\n{OneOf(\"Scann des \", \"Téléchargement des \")} {event.LocalDatalinkType} {OneOf(\"Terminé\", \"achevé\", \"complet\")}.",
      "default": false,
      "name": "Data scanned",
      "description": "Triggered when scanning some types of data links"
    },
    "Data voucher awarded": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Data voucher awarded }\r\n{_ Triggered when you are awarded a data voucher }\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'data_voucher')}\r\n{SetState('eddi_context_last_action', 'award')}\r\n{SetState('eddi_context_bond_amount', event.reward)}\r\n{SetState('eddi_context_bond_faction', event.payeefaction)}\r\n\r\n\"{event.payeefaction}\" vous offre {event.reward} crédits pour les données de \"{event.victimfaction}\" que vous avez téléchargé.\r\n",
      "default": false,
      "name": "Data voucher awarded",
      "description": "Triggered when you are awarded a data voucher"
    },
    "Data voucher redeemed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'data_voucher')}\r\n{SetState('eddi_context_last_action', 'redeem')}\r\n{SetState('eddi_context_data_voucher_amount', event.amount)}\r\n\r\nRécompance de {Humanise(event.amount)} crédits pour les donnée transmises\r\n{Occasionally(2, \"\r\n{if len(event.rewards) = 1:\r\nau sujet de {P(event.rewards[0].faction)}\r\n|else:\r\nau sujet de \r\n{set cur to 0}\r\n{while cur < len(event.rewards):\r\n{if cur = 0:\r\n|elif cur < len(event.rewards) - 1:\r\n,\r\n|else:\r\net\r\n}\r\n{P(event.rewards[cur].faction)}\r\n{set cur to cur + 1}\r\n}\r\n}\r\n\")}.\r\n",
      "default": false,
      "name": "Data voucher redeemed",
      "description": "Triggered when you redeem a data voucher"
    },
    "Datalink message": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Lecture du message: {event.LocalMessage}.",
      "default": false,
      "name": "Datalink message",
      "description": "Triggered upon completion of Datalink scan"
    },
    "Died": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if len(event.ships) > 0:\r\n\r\n    {set commanders to []}\r\n    {for cmdr in event.commanders:\r\n        {if find(cmdr, \"$ShipName\") >= 0:\r\n           {_ Ignore NPC ships _}        \r\n        |else: \r\n           {set commanders to cat(commanders, [cmdr])}\r\n        }\r\n    }\r\n\r\n    {ShipName()} vient\r\n    {Occasionally(2, \" juste \")}\r\n    {OneOf(\" d'être détruit\", \" d'être broyé\", \"d'être explosé\", \"de se faire bouffer\", \"de se prendre une raclée\")}\r\n\r\n    {if len(commanders) = 1:\r\n        par un {event.ships[0]} \r\n  piloté par  {commanders[0]} de rang   {event.LocalRatings[0]}.\r\n    |elif len(commanders) = 2:\r\n        par un {event.ships[0]} \r\n  piloté par  {commanders[0]} de rang   {event.LocalRatings[0]},\r\n        et par un {event.ships[1]} \r\n  piloté par  {commanders[1]} de rang   {event.LocalRatings[1]}.\r\n    |elif len(commanders) > 2:\r\n        {set cur to 0}\r\n        by\r\n        {while cur < len(commanders):\r\n            {if cur = 0:\r\n                par un {event.ships[cur]} \r\n          piloté par  {commanders[cur]} de rang   {event.LocalRatings[cur]}\r\n            |elif cur < len(commanders) - 1:\r\n                , un {event.ships[cur]} \r\n          piloté par  {commanders[cur]} de rang   {event.LocalRatings[cur]}\r\n            |else:\r\n                , et un {event.ships[cur]} \r\n          piloté par  {commanders[cur]} de rang   {event.LocalRatings[cur]}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n}\r\n",
      "default": false,
      "name": "Died",
      "description": "Triggered when you have died"
    },
    "Docked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Pause(2000)}\r\n\r\n{_ Find out in advance what we have to say }\r\n{if ship.LocalRole = \"Généraliste\" || ship.LocalRole = \"Commerce\":\r\n{set purchasecheck to F(\"Commodity purchase check\")}\r\n}\r\n{set limpetcheck to F(\"Limpet check\")}\r\n{set swapoutcheck to F(\"Swapout check\")}\r\n{set salecheck to F(\"Commodity sale check\")}\r\n\r\n{if purchasecheck || salecheck || limpetcheck || swapoutcheck:\r\n{OneOf(\"Établissement d'une liaison avec\",\r\n\"Contact établi avec\",\r\n\"Connection avec\",\r\n\"Accès avec\")}\r\n{OneOf(\"le réseau informatique\", \"le réseau\", \"les réseaux\", \" les ordinateurs\", \"les services\")}.\r\n{OneOf(\"de la base\", \"de la station\", \"de {event.station}\")}\r\n\r\n{Pause(10000)}\r\n{OneOf(\"Début de liaison\", \"Liaison\", \"Accès\", \"Connection\")} {OneOf(\"établi\", \"confirmé\", \"obtenue\", \"autorisé\")}.\r\n{salecheck}\r\n{purchasecheck}\r\n{swapoutcheck}\r\n{limpetcheck}\r\n|else:\r\n{OneOf(\"Communications avec\", \"Contact avec\", \"Liaison avec\", \"accès avec\")}\r\n{OneOf(\"le réseau informatique\", \"le réseau\", \"les réseaux\", \" les ordinateurs\", \"le service\")}\r\n{OneOf(\"de la base\", \"de la station\", \"de {event.station}\")}\r\n\r\n{OneOf(\"établi\", \"confirmé\", \"obtenue\", \"autorisé\")}.\r\n}\r\n{SetState(\"systemearrivee\", event.station)}\r\n{F(\"Zone Occupée\")}",
      "default": false,
      "name": "Docked",
      "description": "Triggered when your ship docks at a station or outpost"
    },
    "Docking cancelled": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Procédure dappontage annulée.",
      "default": false,
      "name": "Docking cancelled",
      "description": "Triggered when your ship cancels a docking request at a station or outpost"
    },
    "Docking denied": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Pause(2000)}\r\n\r\nNous avons un refus d'appontage\r\n\r\n{if event.reason = \"ActiveFighter\":\r\n     Car nos armes sont déployées\r\n|elif event.reason = \"Distance\":\r\n     Parce que nous sommes trop loin de la station\r\n|elif event.reason = \"Hostile\":\r\n     Parce que la sation est sous le contôle d'une faction qui ne veut pas de nous\r\n|elif event.reason = \"NoSpace\":\r\n     Parce que tous les pads d'atterrissage sont occupés\r\n|elif event.reason = \"Offences\":\r\n     Parce que nous avons récemment commis un crime contre eux!... non? sans blague?\r\n|elif event.reason = \"TooLarge\":\r\n     Parce qu'il n'y a aucune zone d'atterrissage assez grande pour notre vaisseau\r\n}.",
      "default": false,
      "name": "Docking denied",
      "description": "Triggered when your ship is denied docking at a station or outpost"
    },
    "Docking granted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'landing pad')}\r\n{SetState('eddi_context_landing_pad_system', system.name)}\r\n{SetState('eddi_context_landing_pad_station', event.station)}\r\n{SetState('eddi_context_landing_pad_pad', event.landingpad)}\r\n\r\n{set station to StationDetails(event.station)}\r\n{set landingpad to state.eddi_context_landing_pad_pad}\r\n{if station.model = \"Coriolis Starport\" || station.model = \"Orbis Starport\" || station.model = \"Ocellus Starport\" || station.model = \"Unknown Starport\":\r\n    {Pause(8000)}\r\n    {F(\"Landing pad report\")}\r\n|else : Votre plate forme dattérissage a le numéro {landingpad} \r\n        \r\n}",
      "default": false,
      "name": "Docking granted",
      "description": "Triggered when your ship is granted docking permission at a station or outpost"
    },
    "Docking requested": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Votre demande d'appontage à  \"{event.station}\" est envoyée.",
      "default": false,
      "name": "Docking requested",
      "description": "Triggered when your ship requests docking at a station or outpost"
    },
    "Docking timed out": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Pas de réponse à la demande dappontage.",
      "default": false,
      "name": "Docking timed out",
      "description": "Triggered when your docking request times out"
    },
    "Empire promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.LocalRank = \"Chevalier\":\r\n    sieur\r\n|elif event.LocalRank = \"Banneret\":\r\n    monseigneur\r\n|elif event.LocalRank = \"Baron\":\r\n    monseigneur\r\n|elif event.LocalRank = \"Vicomte\":\r\n    monseigneur\r\n|elif event.LocalRank = \"Comte\":\r\n    monseigneur\r\n|elif event.LocalRank = \"Earl\":\r\n    monseigneur\r\n|elif event.LocalRank = \"Duc\":\r\n    monseigneur\r\n|elif event.LocalRank = \"Archiduc\":\r\n    votre grace\r\n|elif event.LocalRank = \"Prince\":\r\n    Votre altesse royale\r\n|elif event.LocalRank = \"Roi\":\r\n    Votre majesté\r\n|else:\r\n    commandeur\r\n},\r\nLa flotte impériale \r\n{OneOf(\"vous a accordé une promotion pour le\", \"vous a promu au\", \"vous a gratifié du\", \"vous a nommé au\")}\r\ntitre honorifique de \r\n{event.LocalRank}\r\n{Occasionally(2, \"suite aux services rendu à l'empire\")}.",
      "default": false,
      "name": "Empire promotion",
      "description": "Triggered when your rank increases with the Empire"
    },
    "Engineer progressed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.engineer} vous permet daccéder aux {OneOf('plans', 'technologies','modifications','améliorations')} de grade {event.rank}.",
      "default": false,
      "name": "Engineer progressed",
      "description": "Triggered when you reach a new rank with an engineer"
    },
    "Entered CQC": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Vous entrez dans le C Q C",
      "default": false,
      "name": "Entered CQC",
      "description": "Triggered when you enter CQC"
    },
    "Entered normal space": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'fsd')}\r\n{SetState('eddi_context_last_action', 'disengage')}\r\n{SetState('eddi_context_system_name', event.system)}\r\n{SetState('eddi_context_body_name', event.body)}\r\n{SetState('eddi_context_body_system', event.system)}\r\n{Pause(5000)}\r\n\r\n{OneOf(\"{ShipName()} est\", \"\")} {OneOf(\"entré\", \"revenu\", \"passé\")} en espace normal\r\n\r\n{if event.bodytype = 'Planet':\r\n    {OneOf(\"proche\", \"à cotés de\", \"dans les environs de\")} la planète {P(event.body)}\r\n|elif event.bodytype = 'Star':\r\n    {OneOf(\"proche\", \"à cotés de\", \"dans les environs de\")} l'étoile {P(event.body)}\r\n  |elif event.bodytype = 'Station':\r\n    {OneOf(\"proche\", \"à cotés de\", \"dans les environs de\")} {P(event.body)}\r\n}.",
      "default": false,
      "name": "Entered normal space",
      "description": "Triggered when your ship enters normal space"
    },
    "Entered signal source": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "\r\n{set entered to OneOf(\"Vous entrez\", \"Arrivée\", \"Entrée\")}\r\n\r\n{set warninglevel to:\r\n   {if event.threat < 2:\r\n   |elif event.threat = 2:\r\n      Attention:  niveau de menace moyen\r\n   |elif event.threat = 3:\r\n      Alerte:  menace importtante\r\n   |elif event.threat = 4:\r\n      Danger: Menace létale\r\n   |elif event.threat = 5:\r\n      Danger Extrème:  Menace Létale de haut niveau\r\n   |elif event.threat = 6:\r\n      Danger Extrème:  Menace Létale de trés haut niveau\r\n   |elif event.threat = 7:\r\n      Danger Absolu: Menace Létale au seul maximum\r\n   |else:\r\n      Danger record:  Niveau de menace de rang {event.threat} jamais encore rencontré jusqu'alors\r\n   }\r\n}\r\n{source}\r\n{set source to token(event.source, \"$USS_Type_\", 1)}\r\n\r\n{if source = \"Aftermath;\":\r\n   {set source to OneOf(\"où un combat c'est déroulé\", \"contenant les épaves d'un combat\")}\r\n|elif ((source = \"Anomaly;\" || source = \"Salvage;\") && event.threat = 2):\r\n   {set source to OneOf(\"de présence aliène\", \"xeno-technologique\", \"non-humaine\", \"de sondage Thargoïde\")}\r\n|elif (source = \"Anomaly;\" && event.threat = 4):\r\n   {set source to OneOf(\"de présence aliène\", \"xeno-technologique\", \"non-humaine\", \"de surveillance Thargoïde\")}\r\n|elif source = \"Anomaly;\":\r\n   {set source to OneOf(\"anormale\", \"inconnue\", \"mystérieuse\")}\r\n|elif source = \"Ceremonial;\":\r\n    {set source to OneOf(\"où une cérémonie se déroule\",\"de calme et de cérénité en vue d'une cérémonie\")}\r\n|elif source = \"Convoy;\":\r\n    {set source to \"occupée par un convoi\"}\r\n|elif source = \"DisruptedWakeEchoes;\":\r\n    {set source to \"\"}\r\n|elif source = \"DistressSignal;\":\r\n   {set source to OneOf(\"source d'un signal de détresse\", \"où un vaisseau semble en mauvaise posture\")}\r\n|elif source = \"MissionTarget;\":\r\n   {set source to OneOf(\"cible d'une de vos missions\", \"encodé par votre journal de mission\")}\r\n|elif source = \"NonHuman;\":\r\n   {set source to OneOf(\"de présence aliène\", \"xeno-technologique\", \"non-humaine\")}\r\n|elif source = \"Salvage;\":\r\n    {set source to \"d'émissions dégradées\"}\r\n|elif source = \"ValuableSalvage;\":\r\n    {set source to \"d'émissions encodée\"}\r\n|elif source = \"VeryValuableSalvage;\":\r\n    {set source to \"d'émissions de haute qualité\"}\r\n|elif source = \"WeaponsFire;\":\r\n   {set source to OneOf(\"de combat\", \"avec détection de tirs\")}\r\n}\r\n\r\n{Pause(2000)}\r\n {entered} dans une source de signal {source},\r\n{warninglevel}.\r\n\r\n{if (system.state = \"Anarchy\" && source = \"degraded emissions\" && system.population > 0)=true: \r\n   {Occasionally(2, \" Caution: {set local to OneOf('locales', 'du voisinage')} {set chatter to OneOf('ragots', 'potins', 'rumeurs')} {set indicate to OneOf('disent', 'suggèrent', 'impliquent', 'reportent')} {OneOf('des transmissions {local} {indicate}', 'des {chatter} dans les transmissions {local} {indicate}')} {Occasionally(3, 'quil y a')} {OneOf('une augmentation', 'une élévation', 'une accentuation')} {OneOf('dactivité de', 'de présence de')} {OneOf('syndicat du crime ', 'crime ', 'pirates ', 'gang de pirate ', 'clan de pirate ')} dans {OneOf('la zone', 'le voisinage', 'ce secteur', 'ce système')}. {OneOf('gardez votre', 'concervez votre')} {OneOf('calme', 'concentration', 'attention', 'vigilance')} {Occasionally(3,' {F(Honorific)}')}.\")}\r\n}",
      "default": false,
      "name": "Entered signal source",
      "description": "Triggered when your ship enters a signal source"
    },
    "Entered supercruise": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Pause(1000)}\r\n\r\n{OneOf(\"{ShipName()} est\", \"\")} {OneOf(\"entré en\", \"saut en\")} Hyper vitesse.",
      "default": false,
      "name": "Entered supercruise",
      "description": "Triggered when your ship enters supercruise"
    },
    "Exploration data purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Achat des données {OneOf('du système', 'dexploration')} pour {P(event.system)}\",\r\n            \"les informations {OneOf('système', 'dexploration')} pour {P(event.system)} sont enregistré dans mes banques de données\",\r\n            \"réception des données {OneOf('système', 'dexploration')} pou {P(event.system)} en provenance de la station\",\r\n            \"téléchargement des données géo-spatiale pour {P(event.system) confirmé\")}.",
      "default": false,
      "name": "Exploration data purchased",
      "description": "Triggered when you purchase exploration data"
    },
    "Exploration data sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Données d'exploration de {len(event.systems)} systèmes vendus pour {Humanise(event.reward)} crédits\r\n\r\n{if len(event.firsts) > 0:\r\n    , avec un bonus de {Humanise(event.bonus)} crédits pour\r\n    {if len(event.firsts) = 1:\r\n        une primodécouverte\r\n    |else:\r\n        {len(event.firsts)} primo découvertes\r\n    }\r\n}\r\n.",
      "default": false,
      "name": "Exploration data sold",
      "description": "Triggered when you sell exploration data"
    },
    "Exploration promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'rank')}\r\n{SetState('eddi_context_last_action', 'promotion')}\r\n{SetState('eddi_context_rank_name', 'combat')}\r\n{SetState('eddi_context_rank_amount', event.rating)}\r\n\r\n{OneOf(\"Tribulations au travers de la galaxie\",\"Vos recherches de linconnu en divers endroits de la galaxie\",\"Le différentes routes que vous avez ouverts au travers de la galaxie\",\"L'ensemble de vos découvertes\")} vous ont ammené au titre de {event.LocalRating} en exploration.\r\n",
      "default": false,
      "name": "Exploration promotion",
      "description": "Triggered when your exploration rank increases"
    },
    "Federation promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2,\"Félicitation, officier!\")}\r\n\r\nLa marine fédérale  \r\n{OneOf(\"vous a accordé une promotion pour le\", \"vous a promu au\", \"vous a gratifié du\", \"vous a nommé au\")}\r\ngrade de\r\n{event.LocalRank}\r\n{Occasionally(2, \"suite aux services rendu à la Fédération\")}.",
      "default": false,
      "name": "Federation promotion",
      "description": "Triggered when your rank increases with the Federation"
    },
    "Fighter docked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Le chasseur {OneOf(\"a apponté\",\"est arrimé\")} {Occasionally(2,'{OneOf(\"à votre vaisseau\",\"à son vaisseau mère\")}')}.",
      "default": false,
      "name": "Fighter docked",
      "description": "Triggered when you dock a fighter with your ship"
    },
    "Fighter launched": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Chasseur {OneOf(\"largué\",\"déployé\")} {Occasionally(2,'{OneOf(\"de votre vaisseau\",\"de son vaisseau mère\",\"et paré au combat\")}')}",
      "default": false,
      "name": "Fighter launched",
      "description": "Triggered when you launch a fighter from your ship"
    },
    "File Header": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "File Header",
      "description": "Triggered when the file header is read"
    },
    "Fine incurred": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'fine')}\r\n{SetState('eddi_context_last_action', 'incur')}\r\n{SetState('eddi_context_fine_name', event.victim)}\r\n{SetState('eddi_context_fine_faction', event.faction)}\r\n{SetState('eddi_context_fine_amount', event.fine)}\r\n\r\nVous devez à {P(event.faction)} {Humanise(event.fine)} credits pour {event.LocalCrime} {OneOf(\"envers\", \"sur\", \"à l'encontre de\")} {event.victim}.",
      "default": false,
      "name": "Fine incurred",
      "description": "Triggered when your incur a fine"
    },
    "Fine paid": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'fine')}\r\n{SetState('eddi_context_last_action', 'pay')}\r\n{SetState('eddi_context_fine_amount', event.amount)}\r\n\r\n\r\n{OneOf (\"lamende\",\"Le P V\")} de  {Humanise(event.amount)} crédits est payée.",
      "default": false,
      "name": "Fine paid",
      "description": "Triggered when you pay a fine"
    },
    "Friends status": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Set uselist to \"white\" or \"black\", depending on which list you want to use to filter people _}\r\n{_ \"white\" will only allow notifications from people in this list (e.g. \"User1\", \"User2\", & \"User3\") _}\r\n{_ \"black\" will allow all notification EXCEPT those on this list (e.g. \"User4\", \"User5\", & \"User6\") _}\r\n{_ to allow all notifications, you may also use an empty blacklist (i.e. \"set blacklist to []\" _}\r\n\r\n{set uselist to \"black\"}\r\n\r\n{set whitelist to [\"User1\", \"User2\", \"User3\"]}\r\n{set blacklist to [\"User4\", \"User5\", \"User6\"]}\r\n\r\n{if uselist = \"white\":\r\n    {if find(whitelist, event.friend) > -1:\r\n        {event.friend} est {event.status}.\r\n    }\r\n|elif uselist = \"black\":\r\n    {if find(blacklist, event.friend) = -1:\r\n        {event.friend} est {event.status}.\r\n    }\r\n}",
      "default": false,
      "name": "Friends status",
      "description": "Triggered when a friendly commander changes status"
    },
    "FSD engaged": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n\r\n  {set AncienSystem to (system)}\r\n  \r\n{SetState('eddi_context_last_subject', 'fsd')}\r\n{SetState('eddi_context_last_action', 'engage')}\r\n{SetState('eddi_context_system_name', event.system)}\r\n{SetState('eddi_context_system_system', event.system)}\r\n\r\n  \r\n{if event.target = 'Hyperspace':\r\n    {_ Rewrite context to represent a jump }\r\n    {SetState('eddi_context_last_subject', 'jump')}\r\n    {SetState('eddi_context_last_action', 'start')}\r\n\r\n    {set system to SystemDetails(event.system)}\r\n\r\n    {_ Wait for the FSD countdown and initial jump}\r\n    {Pause(6000)}\r\n\r\n   \r\n\r\n {OneOf(\"Destination confirmée\",\"Saut en cours\",\"Telemetrie obtenue\")}.\r\n  {ShipName()} est en {OneOf(\"partance pour\", \"route vers\", \"voyage vers\", \"transit vers\")} le système {P(system.name)}.\r\n   {if system.name = homesystem.name:\r\n   Bon retour chez vous, {F(\"Honorific\")}\r\n  |else:\r\n        {if event.stellarclass = \"D\":\r\n            Attention: naine blanche détectée.\r\n        |elif event.stellarclass = \"N\":\r\n            Attention: étoile à neutron détectée.\r\n        |elif event.stellarclass = \"H\":\r\n            Attention: {OneOf(\"trou noir detecté\", \"trou normand détecté\", \"Anomalie détectée\")}.\r\n        |elif event.stellarclass != 'F' && event.stellarclass != 'O' && event.stellarclass != 'G' && event.stellarclass != 'K' && event.stellarclass != 'B' && event.stellarclass != 'A' && event.stellarclass != 'M':\r\n            Information: Le plein nest pas réalisable sur létoile destination.\r\n        }\r\n  }\r\n  \r\n  {if AncienSystem.allegiance && AncienSystem.allegiance != \"None\" && AncienSystem.allegiance != \"Independent\" && (!system.allegiance || system.allegiance = \"None\" || system.allegiance = \"Independent\"):\r\n    Vous {OneOf(\"quittez la zone d'influence\", \"êtes partie de la zone\", \"n'êtes plus dans l'espace\")} \r\n  {if AncienSystem.allegiance = \"Empire\":\r\n   {OneOf(\"de lempire\",\"impérial\",\"des services impériaux\")}\r\n  |elif AncienSystem.allegiance = \"Federation\":\r\n   {OneOf(\"de la fédération\",\"fédéral\",\"des services fédéraux\")}\r\n  |elif AncienSystem.allegiance = \"Independent\":\r\n   {OneOf(\"Indépendant\",\"libre\",\"non aligné\")}\r\n  }.\r\n  |elif AncienSystem.allegiance && AncienSystem.allegiance != system.allegiance && system.allegiance && system.allegiance != \"None\":\r\n   Vous {OneOf(\"êtes désormais dans un secteur\", \"entrez en zone\", \"arrivez en domaine de contrôle\")} \r\n   \r\n  {if system.allegiance = 'Empire':\r\n   {OneOf('de lempire','impérial','des services impériaux')},  \r\n  |elif system.allegiance = \"Federation\":\r\n   {OneOf('de la fédération','fédéral','des services fédéraux')},  \r\n  |elif system.allegiance = \"Independent\":\r\n   {OneOf(\"Indépendant\",\"libre\",\"non aligné\")},   \r\n  }.\r\n   {if cmdr.title != \"Commandeur\":\r\n    Bon retour {F(\"Honorific\")}.\r\n   }\r\n  }\r\n\r\n  {if system.visits = 0:\r\n   C'est votre première visite dans ce système\r\n  |elif system.visits = 1:\r\n   C'est votre seconde visite dans ce système\r\n  |elif system.visits = 2:\r\n   C'est votre Troisième visite dans ce système\r\n  |elif system.visits = 3:\r\n   C'est votre quatrième visite dans ce système\r\n  |else:\r\n   Vous avez visité ce système {system.visits} fois\r\n  }.\r\n\r\n  {if !system.population:\r\n   {OneOf(\"système non habité\",\"pas de présence humaine ici\", \"l'humanité n'a pas encore colonisé ce système\", \"Pas de pollution humaine détectée\")}.\r\n  |else:\r\n   {F(\"System report\")}\r\n   {if system.state:\r\n    Létat politico-économique général du système est :  {system.LocalState}.\r\n   }\r\n  }\r\n  \r\n  \r\n  {if MaDistance:\r\n   {Occasionally(7, \"{OneOf(\\\"vou êtes à\\\", \\\"la position actuelle est à\\\", \\\"vous êtes maintenant à\\\")} {Humanise(MaDistance)} années lumières de {OneOf(\\\"votre base principale\\\", \\\"{P(homesystem.name)}\\\")}.\")}\r\n  }\r\n{SetState(\"systemearrivee\", system.name)}{F(\"Zone Occupée\")}.\r\n  {if system.comment:\r\n   You made a {OneOf(\"note\", \"commentaire\", \"remarque\")} {OneOf(\"au sujet de\", \"pour ce\", \"sur ce\")} système.  {OneOf(\"Citation :\", \"disant :\", \"Lecture\", \"c'est :\")} {system.comment}.\r\n  }\r\n }",
      "default": false,
      "name": "FSD engaged",
      "description": "Triggered when your FSD has engaged"
    },
    "Fuel check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fuel Check _}\r\n{_ Report fuel level _}\r\n\r\n{if ship.name = state.eddi_fuelcheck_shipname:\r\n    {if state.eddi_context_fuel_used > state.eddi_fuelcheck_maxfuel:\r\n        {SetState('eddi_fuelcheck_maxfuel', state.eddi_context_fuel_used)}\r\n    }\r\n|else:\r\n    {SetState('eddi_fuelcheck_maxfuel', state.eddi_context_fuel_used)}\r\n    {SetState('eddi_fuelcheck_shipname', ship.name)}\r\n}\r\n\r\n{set maxfuel to state.eddi_fuelcheck_maxfuel}\r\n{set fuelremaining to state.eddi_context_fuel_remaining}\r\n{set maxjump to fuelremaining/maxfuel}\r\n{set currentfuel to round(fuelremaining / ship.fueltanktotalcapacity * 100, 1)}\r\n{if find(currentfuel, \".0\") > -1:\r\n   {set currentfuel to round(currentfuel, 0)}\r\n}\r\n{set shipsfuel to:\r\n   {OneOf(\"niveaux\", \"réservoirs\", \"réserves\")} de carburant {Occasionally(2, \"du {P(ShipName())}\" )} {Occasionally(2, \"sont\")} {Occasionally(2, \"actuellement\")}\r\n}\r\n{set currentpercent to: \r\n   à {currentfuel} pourcent {Occasionally(2, \"de capacité\")}\r\n}\r\n\r\n{if maxjump < 0.5:\r\n   Danger!\r\n   {shipsfuel} vides!\r\n   {Pause(500)}\r\n   Fonctionnement sur les réserves, L'arret de tout système non vital est fortement conseillé.\r\n   {Pause(500)}\r\n   Transpondeur d'urgence activé\r\n   {Pause(500)}\r\n   Vérification radio OK! bande fréquence trouvé! Il est conseillé de faire appel à Symbiose!\r\n|elif maxjump < 1.25:\r\n   {OneOf(\"Attention:\", \"Alerte:\", \"Danger:\", \"Alarme:\")}\r\n   {shipsfuel} {OneOf(\"dangereusement bas\", \"presque à sec\")}.\r\n   {OneOf(\"Approvisionnez en urgence\", \"faire le plein est fortement recommendé\", \"La priorité est de trouver du carburant\")}\r\n|elif currentfuel < 25:\r\n   {OneOf(\"Attention:\", \"Alerte:\", \"Danger:\", \"Alarme:\")}\r\n   {shipsfuel} {OneOf(\"en dessous 25%\", \" {currentpercent}\" )}\r\n|elif currentfuel < 50:\r\n   {shipsfuel} {OneOf(\"en dessous 50%\", \" {currentpercent}\" )}\r\n|elif currentfuel < 100:\r\n   {shipsfuel} {currentpercent}\r\n|else:\r\n   {shipsfuel} {OneOf(currentpercent, \"pleins\")}\r\n}\r\n{Occasionally(3,\", {F('Honorific')}\")}.",
      "default": false,
      "name": "Fuel check",
      "description": "Report on fuel levels"
    },
    "Galnet latest news": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch category from state }\r\n{set articlecategory to state.article_category}\r\n\r\n{if articlecategory:\r\n    {set articles to GalnetNewsArticles(articlecategory)}\r\n|else:\r\n    {set articles to GalnetNewsArticles('Article')}\r\n}\r\n\r\n{if len(articles) = 0:\r\n    \"Il n'y a pas d'article non lu dans cette catégorie\"\r\n|else:\r\n    {set article to articles[0]}\r\n    {SetState('eddi_context_galnet_news_id', article.id)}\r\n    {article.title}: {article.content}\r\n    {GalnetNewsMarkRead(article.id)}\r\n}.",
      "default": false,
      "name": "Galnet latest news",
      "description": "Read the latest unread news in a given category"
    },
    "Galnet mark read": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch category from state }\r\n{set articlecategory to state.article_category}\r\n\r\n{if articlecategory:\r\n    {set articles to GalnetNewsArticles(articlecategory)}\r\n|else:\r\n    {set articles to GalnetNewsArticles('Article')}\r\n}\r\n\r\n{if len(articles) = 0:\r\n    There is no unread news \r\n    {if articlecategory: 'in that category' }\r\n|else:\r\n    {set item to 0}\r\n    {while item < len(articles):\r\n        {GalnetNewsMarkRead(articles[item].id)}\r\n        {set item to (item + 1)}\r\n    }\r\n    {len(articles)} news {OneOf('articles', 'items')} marked as red\r\n}.\r\n",
      "default": true,
      "name": "Galnet mark read",
      "description": "Mark news articles as read"
    },
    "Galnet news": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch article from state }\r\n{set articleid to state.articleid}\r\n{if articleid:\r\n    {set article to GalnetNews(articleid)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'news')}\r\n    {SetState('eddi_context_galnet_news_id', articleid)}\r\n}\r\n\r\n{if !article:\r\n    {_ Fetch from context }\r\n    {set article to GalnetNews(state.eddi_context_galnet_news_id)}\r\n}\r\n\r\n{if article:\r\n    {article.title}: {article.content}\r\n|else:\r\n   Je n'ai aucune information au sujet de cet article\r\n}.\r\n",
      "default": false,
      "name": "Galnet news",
      "description": "Read a particular news article"
    },
    "Galnet news published": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set statustitle to \"^(Galactic News: ((Weekly .*)|(Starport Status Update)))|(Powerplay: Incoming Update)\"}\r\n\r\n{if len(event.items) = 1:\r\n    Un nouvel article dont le nom est {event.items[0].title} a été plublié dans le Galnet.\r\n    {if !match(event.items[0].title, statustitle):\r\n      Lecture du sujet : {event.items[0].content}.\r\n    }\r\n|elif len(event.items) > 1:\r\n    {len(event.items)} nouveaux articles ont été publiés sur le Galnet.\r\n    {set item to 0}\r\n    {while item < len(event.items):\r\n        {if item = 0:\r\n            Titre du premier : {event.items[item].title}\r\n            {if !match(event.items[item].title, statustitle):\r\n                , et contient: {event.items[item].content}\r\n            }.\r\n        |elif item = 1:\r\n            Le second se nomme {event.items[item].title}\r\n            {if !match(event.items[item].title, statustitle):\r\n                , et en voici le contenu: {event.items[item].content}\r\n            }.\r\n        |elif item = len(event.items) - 1:\r\n            Titre du dernier : {event.items[item].title}\r\n            {if !match(event.items[item].title, statustitle):\r\n                . Lecture : {event.items[item].content}\r\n            }.\r\n        |else:\r\n            Le titre du suivant est {event.items[item].title}\r\n            {if !match(event.items[item].title, statustitle):\r\n                , pour : {event.items[item].content}\r\n            }.\r\n        }\r\n        {set item to item + 1}\r\n        {Pause(1000)}\r\n    }\r\n}",
      "default": false,
      "name": "Galnet news published",
      "description": "Triggered when news is published on Galnet"
    },
    "Galnet oldest news": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch category from state }\r\n{set articlecategory to state.article_category}\r\n\r\n{if articlecategory:\r\n    {set articles to GalnetNewsArticles(articlecategory)}\r\n|else:\r\n    {set articles to GalnetNewsArticles('Article')}\r\n}\r\n\r\n{if len(articles) = 0:\r\n    Il n'y a aucun article non lu dans cette catégorie.\r\n|else:\r\n    {set article to articles[len(articles)-1]}\r\n    {SetState('eddi_context_galnet_news_id', article.id)}\r\n    {article.title}: {article.content}\r\n    {GalnetNewsMarkRead(article.id)}\r\n}.",
      "default": false,
      "name": "Galnet oldest news",
      "description": "Read the oldest unread news in a given category"
    },
    "Galnet unread report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set articles to GalnetNewsArticles(\"Article\")}\r\n\r\n{if len(articles) = 0:\r\n    Vous avez déjà lu tous les articles\r\n|elif len(articles) = 1:\r\n    You have one unread news item\r\n|else:\r\n    Vous avez {len(articles)} articles non lus\r\n}.",
      "default": false,
      "name": "Galnet unread report",
      "description": "Report on unread news"
    },
    "Heat damage": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2, \"Danger:\")}\r\nDégats thermiques subis!.",
      "default": false,
      "name": "Heat damage",
      "description": "Triggered when your ship is taking damage from excessive heat"
    },
    "Heat warning": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2, \"Alerte:\")}\r\nLa température dépasse les seuils de tolérance!.",
      "default": false,
      "name": "Heat warning",
      "description": "Triggered when your ship's heat exceeds 100%"
    },
    "Honorific": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{if system.allegiance = \"Empire\":\r\n    {if cmdr.empirerating.rank <= 4:\r\n       commandeur\r\n    |elif cmdr.empirerating.rank = 5:\r\n        sieur\r\n    |elif cmdr.empirerating.rank <= 11:\r\n        monseigneur\r\n    |elif cmdr.empirerating.rank = 12:\r\n        votre grace\r\n    |elif cmdr.empirerating.rank = 13:\r\n        votre altesse royale\r\n    |elif cmdr.empirerating.rank = 14:\r\n        votre majesté\r\n    }\r\n|elif system.allegiance = \"Federation\":\r\n    {if cmdr.federationrating.rank = 0:\r\n        commandeur\r\n    |else:\r\n        {cmdr.federationrating.LocalName}\r\n    }\r\n|else:\r\n    commandeur\r\n}\r\n",
      "default": false,
      "name": "Honorific",
      "description": "Function to provide a suitable honorific for your commander"
    },
    "Hull damaged": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.vehicle = vehicle:\r\n    {if event.health < 40:\r\n        Danger!:\r\n    |elif event.health < 60:\r\n        Attention!:\r\n    |elif event.health < 80:\r\n        Alerte!:\r\n    }\r\n    {OneOf(\"Coque\", \"Intégrité structurelle\", \"Intégrité\")} {Occasionally(3, \"est\")} à {event.health}%.\r\n}",
      "default": false,
      "name": "Hull damaged",
      "description": "Triggered when your hull is damaged to a certain extent"
    },
    "Insurance check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set insurance to round(ship.value * cmdr.insurance / 100)}\r\n\r\n{set covereds to round((cmdr.credits / insurance) - 0.5)}\r\n\r\n{if covereds = 0:\r\n  Danger: vous ne pouvez pas payer d'assurance actuellement.\r\n|elif covereds = 1:\r\n  Attention: Vous avez juste assez de crédit pour payer votre assurance une seule fois.\r\n|elif covereds < 4:\r\n  Note: Vous pouvez payer votre assurance huste deux ou trois fos.\r\n|else\r\n  (aucun problème dassurance avec ce compte en banque)\r\n}",
      "default": false,
      "name": "Insurance check",
      "description": "Check for enough credits to cover your insurance"
    },
    "Jet cone boost": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Pause(1000)}\r\nRéacteur F S D emplifiés de {Humanise(event.boost * 100)} pourcent.",
      "default": false,
      "name": "Jet cone boost",
      "description": "Triggered when enough material has been collected from a solar jet cone (at a white dwarf or neutron star) for a jump boost"
    },
    "Jumped": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'jump')}\r\n{SetState('eddi_context_last_action', 'complete')}\r\n{SetState('eddi_context_system_name', system.name)}\r\n{SetState('eddi_context_system_system', system.name)}\r\n{SetState('eddi_context_fuel_remaining', event.fuelremaining)}\r\n{SetState('eddi_context_fuel_used', event.fuelused)}\r\n\r\n{F('Fuel check')}\r\n{Pause(2000)}\r\n\r\n{set statereport to F(\"System state report\")}\r\n{if statereport:\r\n    {Pause(2000)}\r\n    Information:  {statereport}\r\n}",
      "default": true,
      "name": "Jumped",
      "description": "Triggered when you complete a jump to another system"
    },
    "Jumping": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Jumping",
      "description": "NO LONGER IN USE"
    },
    "Killed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Vous avez vaincu le pilote {event.LocalRating}, {event.victim}.",
      "default": false,
      "name": "Killed",
      "description": "Triggered when you kill another player"
    },
    "Landing pad report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set landingpad to state.eddi_context_landing_pad_pad}\r\nVotre plate forme dattérissage numéro {landingpad} est \r\n{if landingpad = 1:\r\n    à proximité à six heure\r\n|elif landingpad = 2:\r\n    proche de lentré à six heures\r\n|elif landingpad = 3:\r\n    à 6 heures vers le fond\r\n|elif landingpad = 4:\r\n    à 6 heures vers le fond\r\n|elif landingpad = 5:\r\n   vers les sept heures proche \r\n|elif landingpad = 6:\r\n    à sept heure juste à cotés\r\n|elif landingpad = 7:\r\n    à sept heure vers le fond\r\n|elif landingpad = 8:\r\n    vers les sept heures en séloignant\r\n|elif landingpad = 9:\r\n    à huit heure juste devant\r\n|elif landingpad = 10:\r\n    à huit heures vers le fond\r\n|elif landingpad = 11:\r\n    à neuf heure proche\r\n|elif landingpad = 12:\r\n    vers les neufs juste aprés l'entrée\r\n|elif landingpad = 13:\r\n    vers les neufs heures, au centre de la station\r\n|elif landingpad = 14:\r\n    à neuf heures, au fond de la station\r\n|elif landingpad = 15:\r\n    à meuf heures, vers l'arrière de la station\r\n|elif landingpad = 16:\r\n    juste en entrant à dix heures\r\n|elif landingpad = 17:\r\n    à dix heures, juste aprés l'entrée\r\n|elif landingpad = 18:\r\n    vers les dix heures, dans le cul de basse fosse\r\n|elif landingpad = 19:\r\n    Vers les dix heures, au fond de la station\r\n|elif landingpad = 20:\r\n    à onze heures proche de l'entrée\r\n|elif landingpad = 21:\r\n    juste aprés l'entrée à onze heures\r\n|elif landingpad = 22:\r\n    vers les onze heures dans les profondeurs de la station\r\n|elif landingpad = 23:\r\n    au fond à onze heures\r\n|elif landingpad = 24:\r\n    à douze heures vers l'entrée\r\n|elif landingpad = 25:\r\n    à douze heure au fond\r\n|elif landingpad = 26:\r\n    à une heure, juste aprés l'entrée\r\n|elif landingpad = 27:\r\n    à une heure, proche de l'entrée\r\n|elif landingpad = 28:\r\n    à une heure vers le milieu de la station\r\n|elif landingpad = 29:\r\n    à une heure vraiment loin de l'entrée\r\n|elif landigpad = 30:\r\n    vers les une heure au fond de la station\r\n|elif landingpad = 31:\r\n    à deux heures, au début de la station\r\n|elif landingpad = 32:\r\n    à deux heures en entrant\r\n|elif landingpad = 33:\r\n    à deux heures au fond\r\n|elif landingpad = 34:\r\n    à deux heures au fond\r\n|elif landingpad = 35:\r\n à trois heures, au début de la station\r\n|elif landingpad = 36:\r\n    à trois heures juste à l'entrée\r\n|elif landingpad = 37:\r\n    à trois heures, vers le centre de la station\r\n|elif landingpad = 38:\r\n    à trois heures vers le fond\r\n|elif landingpad = 39:\r\n    à quatres heures juste en entrant\r\n|elif landingpad = 40:\r\n    à quatres heures au fond\r\n|elif landingpad = 41:\r\n    à cinq heures peu aprés l'entrée\r\n|elif landingpad = 42:\r\n    à cinq heures peu aprés l'entrée\r\n|elif landingpad = 43:\r\n    à cinq heures vers le centre de la station\r\n|elif landingpad = 44:\r\n à cinq heures au fond\r\n|elif landingpad = 45:\r\n à cinq heures au fond de la station\r\n}\r\n , en passant correctement avec les lumières vertes à votre droite.",
      "default": false,
      "name": "Landing pad report",
      "description": "Report on the location of a landing pad"
    },
    "Liftoff": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.playercontrolled = true:\r\n  Décollage.\r\n|else:\r\n  {ShipName()} a décollé.\r\n}",
      "default": false,
      "name": "Liftoff",
      "description": "Triggered when your ship lifts off from a planet's surface"
    },
    "Limpet check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set  controllers to 0}\r\n{for compartment in ship.compartments:\r\n    {if find(compartment.module.name, \"Controller\") != -1:\r\n        {set controllers to controllers + 1}\r\n    }\r\n}\r\n\r\n{set limpets to 0}\r\n{for cargo in ship.cargo:\r\n    {if cargo.commodity.name = \"Limpet\":\r\n        {set limpets to limpets + cargo.amount}\r\n    }\r\n}\r\n\r\n{set tenpercent to ship.cargocapacity / 10 - 1}\r\n{if controllers > 0 && limpets = 0:\r\n    Mémo: Vous avez un contrôleur de drône mais aucun drone collecteur à bord.\r\n|elif controllers = 0 && limpets > 0:\r\n    Vous avez des drones collecteurs mais aucun controleur pour les diriger.\r\n|elif controllers > 0 && limpets < tenpercent:\r\n    Vous avez seulement {limpets} drones collecteur à bord; Vous devriez reconsidérer un restockage.\r\n}\r\n",
      "default": false,
      "name": "Limpet check",
      "description": "Check for the presence/absence of limpets and limpet controllers"
    },
    "Limpet purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.amount} sonde{if event.amount > 1:s}\r\n{Occasionally(2, \"ont été\")}\r\najouté à votre\r\n{OneOf(\"soute\", \"inventaire\", \"réserve\")}",
      "default": false,
      "name": "Limpet purchased",
      "description": "Triggered when you buy limpets from a station"
    },
    "Limpet sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.amount} drone{if event.amount > 1:s}\r\n{Occasionally(2, \"ont été\")} vendu.",
      "default": false,
      "name": "Limpet sold",
      "description": "Triggered when you sell limpets to a station"
    },
    "List launchbays": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{for launchbay in ship.launchbays:\r\n    Vous avez un hangar pour\r\n {if launchbay.type=\"SRV\": S R V |else: Mini-Chasseur} \r\n de taille {launchbay.size}.\r\n    {for vehicle in launchbay.vehicles:\r\n        qui contient un {P(vehicle.name)} option {vehicle.loadout}\r\n\r\n        {if type(vehicle.mount) != null:\r\n            {if vehicle.mount = 'F':\r\n                , et armement fixe\r\n            |elif vehicle.mount = 'G':\r\n                , et armement rotatif\r\n            }\r\n        }\r\n        {_ full stop}\r\n\r\n        {if vehicle.rebuilds != null:\r\n            {if vehicle.rebuilds = 1:\r\n                qui peut être renouvelé une fois.\r\n            |elif vehicle.rebuilds = 0:\r\n                qui ne peut pas être renouvelé.\r\n            |else:\r\n                qui a {vehicle.rebuilds} renouvellement possible.\r\n            }\r\n        }\r\n\r\n        {Pause(500)}\r\n    }\r\n}\r\n",
      "default": false,
      "name": "List launchbays",
      "description": "Describes the contents of each launchbay in the ship"
    },
    "Location": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_system_name', event.system)}\r\n{SetState('eddi_context_body_name', event.body)}\r\n{SetState('eddi_context_body_system', event.system)}\r\n\r\nVous êtes\r\n{if event.docked:\r\n    Parké dans\r\n    {if event.station = event.body:\r\n        la station orbitale  {P(event.station)},\r\n    |else:\r\n        la station planétaire {P(event.station)} on {P(event.body)},\r\n    }\r\n|elif event.body:\r\n    proche de {P(event.body)}\r\n}\r\ndans le système {P(event.system)} .",
      "default": false,
      "name": "Location",
      "description": "Triggered when the commander's location is reported, usually when they reload their game."
    },
    "Market information updated": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Find out in advance what we have to say }\r\n{if ship.role = \"Multi-purpose\" || ship.role = \"Trading\":\r\n    {set purchasecheck to F(\"Commodity purchase check\")}\r\n}\r\n{set limpetcheck to F(\"Limpet check\")}\r\n{set swapoutcheck to F(\"Swapout check\")}\r\n{set salecheck to F(\"Commodity sale check\")}\r\n\r\n{if purchasecheck || salecheck || limpetcheck || swapoutcheck:\r\n    {OneOf(\"mise à jour\", \"rafraichissement\", \"chargement\")} des\r\n    {OneOf(\"données\", \"informations\", \"prix\")}\r\n    {OneOf(\"du Maché\", \"du marché local\", \"des services de la Station\")}\r\n    {OneOf(\"reçu\", \"obtenu\")}.\r\n\r\n\r\n    {salecheck}\r\n    {purchasecheck}\r\n    {swapoutcheck}\r\n    {limpetcheck}\r\n}",
      "default": false,
      "name": "Market information updated",
      "description": "Triggered when market information for the currently docked station has been updated"
    },
    "Material collected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'collect')}\r\n{SetState('eddi_context_material_name', event.material)}\r\n{SetState('eddi_context_material_name', material.name)}\r\n\r\n{if MaterialDetails(event.name).category = \"Data\" :\r\n \r\n {event.amount} données : {event.LocalName}, {OneOf(\"sont bien téléchargées.\",\"sont enregistrées.\",\"sont collectées\")}\r\n|elif MaterialDetails(event.name).category = \"Manufactured\" : \r\n {event.amount} objet manufacturé:\r\n {event.LocalName}{OneOf(\"viens d'être chargé.\",\"est collecté.\",\"est dans la soute\")}\r\n|else :\r\n   {event.amount} unité de matière :\r\n {event.LocalName} {OneOf(\"viens d'être chargé.\",\"est collecté.\",\"est dans la soute\")}\r\n\r\n}.\r\n\r\n\r\n   {if MaterialDetails(event.name).rarity.level = 1 :\r\n    {Occasionally(5, \"Quelque chose de vraiment trés commun, fautil le garder en stock?\")}\r\n\r\n   |elif MaterialDetails(event.name).rarity.level = 2 :\r\n    {Occasionally(4, \"Quelque chose de commun, doiton le garder?\")}\r\n\r\n   |elif MaterialDetails(event.name).rarity.level = 3 :\r\n    {Occasionally(3, \"C'est pas tous les jours qu'on voit ça, mais c'est pas exceptionnel non plus.\")}\r\n\r\n   |elif MaterialDetails(event.name).rarity.level = 4 :\r\n    {Occasionally(2, \"Quelque chose de rare, cela pourrait être intéressant pour l'avenir.\")}\r\n \r\n   |elif MaterialDetails(event.name).rarity.level = 5 :\r\n       Voilà le rare du rare, à conserver bien au chaud!.\r\n}",
      "default": false,
      "name": "Material collected",
      "description": "Triggered when you collect a material"
    },
    "Material discard report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to obtain a material from inventory}\r\n{set _inventory(required) to:\r\n    {for material in materials:\r\n        {if material.material = required:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Fetch material from state }\r\n{set material to state.material}\r\n\r\n{_ set material to \"chrome\"}\r\n\r\n{if material:\r\n    {_ Fetch full material details }\r\n    {set material to MaterialDetails(material)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'material')}\r\n    {SetState('eddi_context_material_name', material.name)}\r\n}\r\n\r\n{if !material:\r\n    {_ Fetch from context }\r\n    {set material to MaterialDetails(state.eddi_context_material_name)}\r\n}\r\n\r\n{set inventory to _inventory(material.name)}\r\n\r\n\r\n{if inventory:\r\n    {if inventory.maximum && inventory.maximum < inventory.amount:\r\n        {set over to inventory.amount - inventory.maximum}\r\n        {if over > 1:\r\n            Vous pouvez éjecter {over} unités de {inventory.LocalName} pour avoir la quantité maximum désirée.\r\n        |elif over = 1:\r\n            Vous pouvez éjecter 1 unité de {inventory.LocalName}pour avoir la quantité maximum désirée.\r\n        }\r\n    |elif inventory.desired && inventory.desired < inventory.amount:\r\n        {set over to inventory.amount - inventory.desired}\r\n        {if over > 1:\r\n            Vous pouvez éjecter {over} unités de {inventory.LocalName} pour avoir la quantité optimale désirée.\r\n        |elif over = 1:\r\n            Vous pouvez éjecter 1 unités de {inventory.LocalName} pour avoir la quantité optimale désirée.\r\n        }\r\n    |elif inventory.desired:\r\n        Vous êtes en dessous de votre quantité optimale désirée pour : {inventory.LocalName}.\r\n    |elif inventory.maximum:\r\n        Vous êtes en dessous de votre quantité Maximale désirée pour : {inventory.LocalName}.\r\n    |else:\r\n        Vous êtes en dessous de tous les seuils désirés pour : {inventory.LocalName}.\r\n    }\r\n}",
      "default": false,
      "name": "Material discard report",
      "description": "Report on how many of a material can be discarded"
    },
    "Material discarded": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'discard')}\r\n{SetState('eddi_context_material_name', event.material)}\r\n\r\n\r\n{if MaterialDetails(event.name).category = \"Data\" :\r\n {event.amount} données : {event.LocalName}, effacée {OneOf(\"de la base de donnée\",\"de la mémoire centrale\",\"de l'ordinateur\")}\r\n|elif MaterialDetails(event.name).category = \"Manufactured\" : \r\n {event.amount}  objet manufacturé:\r\n {event.LocalName}{OneOf(\"éjecté.\",\"jeté.\",\"de reour dans l'espace\")}\r\n|else :\r\n  {event.amount} unité de matière :\r\n {event.LocalName} {OneOf(\"éjecté.\",\"jeté.\",\"de reour dans l'espace\")}\r\n\r\n}.",
      "default": false,
      "name": "Material discarded",
      "description": "Triggered when you discard a material"
    },
    "Material discovered": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'discover')}\r\n{SetState('eddi_context_material_name', event.material)}\r\n",
      "default": true,
      "name": "Material discovered",
      "description": "Triggered when you discover a material"
    },
    "Material donated": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'donate')}\r\n{SetState('eddi_context_material_name', event.material)}\r\n\r\n{if MaterialDetails(event.name).category = \"Data\" :\r\n {event.amount} données : {event.name}, transférée.\r\n|elif MaterialDetails(event.name).category = \"Manufactured\" : \r\n {event.amount}  objet manufacturé:\r\n {event.LocalName}{OneOf(\"offerts.\",\"donnés.\",\"laissé en cadeau\")}\r\n|else :\r\n  {event.amount} unité de matière :\r\n {event.LocalName} {OneOf(\"offerts.\",\"donnés.\",\"laissé en cadeau\")}\r\n\r\n}.",
      "default": false,
      "name": "Material donated",
      "description": "Triggered when you donate a material"
    },
    "Material inventory": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Material inventory",
      "description": "Triggered when you obtain an inventory of your current materials"
    },
    "Material inventory report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to obtain a material from inventory}\r\n{set _inventory(required) to:\r\n    {for material in materials:\r\n        {if material.material = required:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Fetch material from state }\r\n{set material to state.material}\r\n\r\n{_ set material to \"chrome\"}\r\n\r\n{if material:\r\n    {_ Fetch full material details }\r\n    {set material to MaterialDetails(material)}\r\n \r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'material')}\r\n    {SetState('eddi_context_last_subject', 'inventory')}\r\n    {SetState('eddi_context_material_name', material.name)}\r\n}\r\n\r\n{if !material:\r\n    {_ Fetch from context }\r\n    {set material to MaterialDetails(state.eddi_context_material_name)}\r\n}\r\n\r\n{set inventory to _inventory(material.name)}\r\n\r\n{if inventory && inventory.amount > 0:\r\n    {if inventory.amount = 1:\r\n       Vous avez {inventory.amount} unités de {inventory.LocalName} à bord.\r\n    |else:\r\n       Vous avez {inventory.amount} unités de {inventory.LocalName}à bord.\r\n    }\r\n|else:\r\n    Vous navez aucun {inventory.LocalName} à bord.\r\n}",
      "default": false,
      "name": "Material inventory report",
      "description": "Report on how many of a material are on-board"
    },
    "Material location report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch material from state }\r\n{set material to state.material}\r\n\r\n{_ set material to \"Conductive Polymers\"}\r\n\r\n{if material:\r\n    {_ Fetch full material details }\r\n    {set material to MaterialDetails(material)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'material')}\r\n    {SetState('eddi_context_material_name', material.name)}\r\n}\r\n\r\n{if !material:\r\n    {_ Fetch from context }\r\n    {set material to MaterialDetails(state.eddi_context_material_name)}\r\n}\r\n\r\n{if material.name:\r\n    {if material.location:\r\n        {material.LocalName} peut être {material.LocalLocation}\r\n    |else:\r\n        Aucune information pour savoir où trouver {material.LocalName} \r\n    }\r\n|else:\r\n    Je n'est aucune information sur ça\r\n}.",
      "default": false,
      "name": "Material location report",
      "description": "Report on the where to obtain a particular material"
    },
    "Material required report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set required to []}\r\n\r\n{for material in materials:\r\n  {if material.desired && material.amount < material.desired:\r\n    {set required to cat(required, [material])}\r\n }\r\n}\r\n\r\n{if len(required) > 0:\r\n    Il vous manque\r\n    {if len(required) = 1:\r\n        {required[0].desired - required[0].amount} \r\n  {required[0].LocalName}\r\n    |elif len(required) = 2:\r\n        {required[0].desired - required[0].amount} {required[0].LocalName} and {required[1].desired - required[1].amount} {required[1].LocalName}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(required):\r\n            {if cur = 0:\r\n                {required[cur].desired - required[cur].amount} {required[cur].LocalName}\r\n            |elif cur < len(required) - 1:\r\n                , {required[cur].desired - required[cur].amount} {required[cur].LocalName}\r\n            |else:\r\n                , and {required[cur].desired - required[cur].amount} {required[cur].LocalName}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }.\r\n|else:\r\n    Quantité de matériel présent comme indiqué dans votre liste de choix.\r\n}",
      "default": false,
      "name": "Material required report",
      "description": "Report on how many of a material are required to reach 'desired' level"
    },
    "Material threshold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.level = 'Minimum':\r\n    {_ Gone below the minimum level }\r\n    {OneOf(\"Stock\", \"Inventaire\", \"Approvisionnemet\")} de {set translate to event.material.name} {F(\"Translate Element\")} est passé en dessous de votre minimum surveillé.\r\n|elif event.level = 'Maximum':\r\n  {_ Gone above the maximum level }\r\n    {OneOf(\"Stock\", \"Inventaire\", \"Approvisionnemet\")} of {set translate to event.material.name} {F(\"Translate Element\")} a augmenté au delà de votre maximum toléré.\r\n|else:\r\n    {_ Moved around the desired level }\r\n    {if event.change = 'Increase':\r\n        Vous avez atteint la quantité optimale désirée de : {set translate to event.material.name} {F(\"Translate Element\")}.\r\n    |else:\r\n        Vous êtes en dessous de la quantité nominale désirée pour : {set translate to event.material.name} {F(\"Translate Element\")}.\r\n    }\r\n} \r\n\r\n{OneOf(\"Le stock actuel est de {event.amount}\",\r\n       \"inventaire de {event.amount}\",\r\n       \"{event.amount} unités à bord\")}.",
      "default": false,
      "name": "Material threshold",
      "description": "Triggered when a material reaches a threshold"
    },
    "Material use report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch material from state }\r\n{set material to state.material}\r\n{_ set material to \"Carbon\"}\r\n\r\n\r\n{if material:\r\n    {_ Fetch full material details }\r\n    {set material to MaterialDetails(material)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'material')}\r\n    {SetState('eddi_context_material_name', material.name)}\r\n}\r\n\r\n{if !material:\r\n    {_ Fetch from context }\r\n    {set material to MaterialDetails(state.eddi_context_material_name)}\r\n}\r\n\r\n{if material && material.name:\r\n    {set uses to len(material.blueprints)}\r\n    {if slice(material.name, len(material.name)-1) = 's':\r\n        {set plural to 'sont'}\r\n    |else:\r\n        {set plural to 'est'}\r\n    }  \r\n    {if uses = 0:\r\n      {material.LocalName} {plural} non utilisé quelque soit le schéma technique.\r\n    |elif uses = 1:\r\n   {material.blueprints[0].name}\r\n   {material.blueprints[0].modulename}\r\n        {set name to cat(material.blueprints[0].name, ' ', material.blueprints[0].modulename, ' grade ', material.blueprints[0].grade)}\r\n        \r\n   {material.LocalName}{plural} utilisé pour le schéma {name}\r\n  |elif uses = 2:\r\n   {material.blueprints[0].name}\r\n   {material.blueprints[0].modulename}\r\n\r\n        {set name0 to cat(material.blueprints[0].name, ' ', material.blueprints[0].modulename, ' grade ', material.blueprints[0].grade)}\r\n\r\n  {material.blueprints[1].name}\r\n  {material.blueprints[1].modulename}\r\n\r\n        {set name1 to cat(material.blueprints[1].name, ' ', material.blueprints[1].modulename, ' grade ', material.blueprints[1].grade)}\r\n        {material.LocalName}{plural} utilisé pour {name0} et {name1}.\r\n    |else:\r\n        {material.name}{plural} utilisés dans {len(material.blueprints)} schéma technique.  Liste :\r\n        {set cur to 0}\r\n        {while cur < len(material.blueprints):\r\n\r\n    {material.blueprints[cur].name}\r\n    {material.blueprints[cur].modulename}\r\n            {set name to cat(material.blueprints[cur].name, ' ', material.blueprints[cur].modulename, ' grade ', material.blueprints[cur].grade)}\r\n            {if cur = 0:\r\n                {name} \r\n   |elif cur < len(material.blueprints) - 1:\r\n                , {name}\r\n            |else:\r\n                , et {name}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n|else:\r\n    Je n'ai aucune information sur ce matériel\r\n}.",
      "default": false,
      "name": "Material use report",
      "description": "Report on the use of a material"
    },
    "Materials discard report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Find those that are above maximum, desired and minimum}\r\n{set shoulddiscardmaterials to []}\r\n{set coulddiscardmaterials to []}\r\n{set lastdiscardmaterials to []}\r\n\r\n{for material in materials:\r\n    {if material.maximum && material.amount > material.maximum:\r\n      {set shoulddiscardmaterials to cat(shoulddiscardmaterials, [material])}\r\n    |elif material.desired && material.amount > material.desired:\r\n      {set coulddiscardmaterials to cat(coulddiscardmaterials, [material])}\r\n    |elif material.minimum && material.amount > material.minimum:\r\n      {set lastdiscardmaterials to cat(lastdiscardmaterials, [material])}\r\n    }\r\n}\r\n\r\n{if len(shoulddiscardmaterials) > 0:\r\n    Vous êtes au dela du maximum désiré pour {if len(shoulddiscardmaterials) = 1: 1 éléments |else: {len(shoulddiscardmaterials)} élements}.  Vous pouvez jeter :\r\n    {if len(shoulddiscardmaterials) = 1:\r\n        {shoulddiscardmaterials[0].amount - shoulddiscardmaterials[0].maximum} {shoulddiscardmaterials[0].LocalName} \r\n\r\n    |elif len(shoulddiscardmaterials) = 2:\r\n        {shoulddiscardmaterials[0].amount - shoulddiscardmaterials[0].maximum} {shoulddiscardmaterials[0].LocalName}  and {shoulddiscardmaterials[1].amount - shoulddiscardmaterials[1].maximum} {shoulddiscardmaterials[1].LocalName} \r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(shoulddiscardmaterials):\r\n            {if cur = 0:\r\n                {shoulddiscardmaterials[cur].amount - shoulddiscardmaterials[cur].maximum} {shoulddiscardmaterials[cur].LocalName} \r\n            |elif cur < len(shoulddiscardmaterials) - 1:\r\n                , {shoulddiscardmaterials[cur].amount - shoulddiscardmaterials[cur].maximum} {shoulddiscardmaterials[cur].LocalName} \r\n            |else:\r\n                , et {shoulddiscardmaterials[cur].amount - shoulddiscardmaterials[cur].maximum} {shoulddiscardmaterials[cur].LocalName} \r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }.\r\n|elif len(coulddiscardmaterials) > 0:\r\n    vous êtes au dessus de votre seuil médian de matière pour {if len(coulddiscardmaterials) = 1: 1 produit |else: {len(coulddiscardmaterials)} éléments}.  vous pouvez vous débarasser de :\r\n    {if len(coulddiscardmaterials) = 1:\r\n        {coulddiscardmaterials[0].amount - coulddiscardmaterials[0].desired} {coulddiscardmaterials[0].LocalName}  \r\n\r\n    |elif len(coulddiscardmaterials) = 2:\r\n        {coulddiscardmaterials[0].amount - coulddiscardmaterials[0].desired} {coulddiscardmaterials[0].LocalName}   and {coulddiscardmaterials[1].amount - coulddiscardmaterials[1].desired} {coulddiscardmaterials[1].LocalName}  \r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(coulddiscardmaterials):\r\n            {if cur = 0:\r\n                {coulddiscardmaterials[cur].amount - coulddiscardmaterials[cur].desired} {coulddiscardmaterials[cur].LocalName}\r\n            |elif cur < len(coulddiscardmaterials) - 1:\r\n                , {coulddiscardmaterials[cur].amount - coulddiscardmaterials[cur].desired} {coulddiscardmaterials[1].LocalName}\r\n            |else:\r\n                , and {coulddiscardmaterials[cur].amount - coulddiscardmaterials[cur].desired} {coulddiscardmaterials[1].LocalName}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }.\r\n|elif len(lastdiscardmaterials) > 0:\r\n    Vous êtes au dessus de votre seuil minimum de matière pour {if len(lastdiscardmaterials) = 1: 1 élément |else: {len(lastdiscardmaterials)} éléments}.  Vous pouvez éliminer :\r\n    {if len(lastdiscardmaterials) = 1:\r\n        {lastdiscardmaterials[0].amount - lastdiscardmaterials[0].minimum} {lastdiscardmaterials[0].LocalName}\r\n\r\n    |elif len(lastdiscardmaterials) = 2:\r\n        {lastdiscardmaterials[0].amount - lastdiscardmaterials[0].minimum} {lastdiscardmaterials[0].LocalName} and {lastdiscardmaterials[1].amount - lastdiscardmaterials[1].minimum} {lastdiscardmaterials[1].LocalName}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(lastdiscardmaterials):\r\n            {if cur = 0:\r\n                {lastdiscardmaterials[cur].amount - lastdiscardmaterials[cur].minimum} {lastdiscardmaterials[cur].LocalName}\r\n            |elif cur < len(lastdiscardmaterials) - 1:\r\n                , {lastdiscardmaterials[cur].amount - lastdiscardmaterials[cur].minimum} {lastdiscardmaterials[cur].LocalName}\r\n            |else:\r\n                , and {lastdiscardmaterials[cur].amount - lastdiscardmaterials[cur].minimum} {lastdiscardmaterials[cur].LocalName}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }.\r\n|else:\r\n    Aucun des matériaux ne dépasse vos seuils.\r\n}",
      "default": false,
      "name": "Materials discard report",
      "description": "Report on which materials can be discarded"
    },
    "Materials required report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set required to []}\r\n\r\n{for material in materials:\r\n  {if material.desired && material.amount < material.desired:\r\n    {set required to cat(required, [material])}\r\n }\r\n}\r\n\r\n{if len(required) > 0:\r\n    Il vous manque\r\n    {if len(required) = 1:\r\n        {required[0].desired - required[0].amount} \r\n  {set translate to required[0].material} {F(\"Translate Element\")}\r\n    |elif len(required) = 2:\r\n        {required[0].desired - required[0].amount} {set translate to required[0].material} {F(\"Translate Element\")} and {required[1].desired - required[1].amount} {set translate to required[1].material} {F(\"Translate Element\")}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(required):\r\n            {if cur = 0:\r\n                {required[cur].desired - required[cur].amount} {set translate to required[cur].material} {F(\"Translate Element\")}\r\n            |elif cur < len(required) - 1:\r\n                , {required[cur].desired - required[cur].amount} {set translate to required[cur].material} {F(\"Translate Element\")}\r\n            |else:\r\n                , and {required[cur].desired - required[cur].amount} {set translate to required[cur].material} {F(\"Translate Element\")}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }.\r\n|else:\r\n    Quantité de matériel présent comme indiqué dans votre liste de choix.\r\n}",
      "default": false,
      "name": "Materials required report",
      "description": "Report on how many of each material are required to reach 'desired' level"
    },
    "Message received": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'message')}\r\n{SetState('eddi_context_last_action', 'receive')}\r\n{SetState('eddi_context_message_name', event.from)}\r\n{SetState('eddi_context_message_content', event.message)}\r\n\r\n{if event.message = \"o7\":\r\n    {event.from} salut\r\n    {if event.channel = \"player\":\r\n        toi\r\n    }.\r\n|else:\r\n    Message reçu de {event.from}.  Lecture: {event.message}.\r\n}",
      "default": false,
      "name": "Message received",
      "description": "Triggered when you receive a message"
    },
    "Message sent": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'message')}\r\n{SetState('eddi_context_last_action', 'send')}\r\n{SetState('eddi_context_message_name', event.to)}\r\n{SetState('eddi_context_message_content', event.message)}\r\n\r\n{OneOf(\"Message envoyé\", \"Message réceptionné\", \"Message expédié\")}.",
      "default": false,
      "name": "Message sent",
      "description": "Triggered when you send a message"
    },
    "Mission abandoned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Mission abandonnée.",
      "default": false,
      "name": "Mission abandoned",
      "description": "Triggered when you abandon a mission"
    },
    "Mission accepted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.communal:\r\n    Community goal accepté.\r\n|else:\r\n    Mission {event.LocalName} pour {P(event.faction)} acceptée.\r\n    {if event.passengerswanted:\r\n        {set wanteddescription to OneOf(\"Passager recherché\", \"criminel connu\")}\r\n        Attention: {OneOf(\"Vous transportez un {wanteddescription}\",\"{wanteddescription} maintenant à bord\")}.\r\n    }\r\n}",
      "default": false,
      "name": "Mission accepted",
      "description": "Triggered when you accept a mission"
    },
    "Mission completed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.reward > 0:\r\n  {if event.amount >0: livraison de {event.amount} {event.LocalCommodity} effectuée.}\r\n    Paiement de {Humanise(event.reward)} credits {Occasionally(2, 'de {P(event.faction)}')} {OneOf('reçu', 'confirmé')}.\r\n|elif event.donation > 0:\r\n    {OneOf(\"Donation {Occasionally(2, 'de {Humanise(event.donation)} credits')} pour {P(event.faction)} {Occasionally(2, 'qui vous est reconnaissante')}\",\r\n                 \"{P(event.faction)} a {Occasionally(2, 'gracieusement')} reçue votre donation {Occasionally(2, 'de {Humanise(event.donation)} credits')}\",\r\n                 \"{P(event.faction)} vous remercie pour votre donation {Occasionally(2, 'de {Humanise(event.donation)} credits')}\"\r\n    )}.\r\n|else:\r\n  {if event.amount >0: livraison de {event.amount} {event.LocalCommodity} effectuée.}\r\n    Mission terminée avec succés.\r\n}\r\n{for commodityreward in event.commodityrewards:\r\n  {commodityreward.amount} tonnes de {commodityreward.LocalCommodity} {OneOf(\"maintenant à bord\", \"reçu également\", \"confirmé en soute\")}.\r\n}",
      "default": false,
      "name": "Mission completed",
      "description": "Triggered when you complete a mission"
    },
    "Mission failed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"mission échouée\", \"échec de la mission\")}.",
      "default": false,
      "name": "Mission failed",
      "description": "Triggered when you fail a mission"
    },
    "Mission redirected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Mission de\r\n{if event.olddestinationstation:\r\n   {event.olddestinationstation} du système {event.olddestinationsystem} \r\n   redirigé vers {event.newdestinationstation} dans le système{event.newdestinationsystem}\r\n|else:\r\n   {event.olddestinationsystem} redirigé vers le système {event.newdestinationsystem}\r\n}",
      "default": false,
      "name": "Mission redirected",
      "description": "Triggered when a mission is redirected"
    },
    "Modification applied": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.engineer} applique la modification sur votre vaisseau.",
      "default": false,
      "name": "Modification applied",
      "description": "Triggered when you apply a modification to a module"
    },
    "Modification crafted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.engineer} a préparé une modification pour votre vaisseau.",
      "default": false,
      "name": "Modification crafted",
      "description": "Triggered when you craft a modification to a module"
    },
    "Module arrived": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2, '{F(\\'Honorific\\')}, ')}\r\nVotre {event.module.LocalName} \r\n\r\n{OneOf('est arrivé {if event.system && event.station: \\'à\\')}', \r\n       'a fini son transfert {if event.system && event.station: \\'vers\\')}')}\r\n\r\n{if event.sytem != system.name && len(event.system) > 0 && len(event.station) > 0:\r\n   {event.station} in the {event.system} system\r\n|elif event.station != station.name && len(event.station) > 0:\r\n   {event.station}\r\n}.",
      "default": false,
      "name": "Module arrived",
      "description": "Triggered when you complete a module transfer"
    },
    "Module purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Vous avez acheté un module {event.buymodule.LocalName}\r\n\r\n{if type(event.buymodule.mount) != \"void\":\r\n    {for index, value in event.buymodule.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fixe\r\n    |elif mount = 1:\r\n        rotafif\r\n    |elif mount = 2:\r\n        montage tourelle\r\n    }\r\n}\r\n {event.buymodule.class}-{event.buymodule.grade}\r\n pour {event.buyprice} crédits\r\n\r\n{if type(event.sellmodule) != \"void\":\r\n    , et vendu un module {event.sellmodule.LocalName}\r\n\r\n    {if type(event.sellmodule.mount) != \"void\":\r\n        {for index, value in event.sellmodule.mount: {set mount to value}}\r\n        {if mount = 0:\r\n            fixe\r\n        |elif mount = 1:\r\n            rotafif\r\n       |elif mount = 2:\r\n            montage tourelle\r\n        }\r\n    }\r\n {event.sellmodule.class}-{event.sellmodule.grade},\r\n    pour {event.sellprice} crédits\r\n\r\n|elif type(event.storedmodule) != \"void\":\r\n    , et {OneOf(\"stocké\", \"mis au hangar\", \"conservé\")} votre {event.storedmodule.LocalName}\r\n    {if type(event.storedmodule.mount) != \"void\":\r\n        {for index, value in event.storedmodule.mount: {set mount to value}}\r\n        {if mount = 0:\r\n            fixe\r\n        |elif mount = 1:\r\n            rotafif\r\n       |elif mount = 2:\r\n            montage tourelle\r\n        }\r\n    }\r\n    {event.storedmodule.class}-{event.storedmodule.grade}\r\n}.\r\n\r\n\r\n",
      "default": false,
      "name": "Module purchased",
      "description": "Triggered when you purchase a module in outfitting"
    },
    "Module retrieved": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "You have retrieved a {event.module.class}-{event.module.grade},\r\n\r\n{if type(event.module.mount) != \"void\":\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fixed\r\n    |elif mount = 1:\r\n        giimballed\r\n    |elif mount = 2:\r\n        turreted\r\n    }\r\n}\r\n\r\n{event.module.name} from storage\r\n\r\n{if type(event.swapoutmodule) != \"void\":\r\n    and stored a {event.swapoutmodule.class}-{event.swapoutmodule.grade},\r\n\r\n    {if type(event.swapoutmodule.mount) != \"void\":\r\n        {for index, value in event.swapoutmodule.mount: {set mount to value}}\r\n        {if mount = 0:\r\n            fixed\r\n        |elif mount = 1:\r\n            giimballed\r\n       |elif mount = 2:\r\n            turreted\r\n        }\r\n    }\r\n    {event.swapoutmodule.name}\r\n}\r\n\r\n{if type(event.cost) != \"void\": for a cost of {event.cost} credits}\r\n",
      "default": true,
      "name": "Module retrieved",
      "description": "Triggered when you fetch a previously stored module"
    },
    "Module sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Vous avez vendu votre {event.module.LocalName}\r\n\r\n{if type(event.module.mount) != \"void\":\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fixe\r\n    |elif mount = 1:\r\n        rotatif\r\n    |elif mount = 2:\r\n        montage tourelle\r\n    }\r\n}\r\n{event.module.class}-{event.module.grade},\r\n depuis votre stock pour {event.price} crédits.",
      "default": false,
      "name": "Module sold",
      "description": "Triggered when selling a module to outfitting"
    },
    "Module sold from storage": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Vous avez vendu votre {event.module.LocalName}\r\n\r\n{if type(event.module.mount) != \"void\":\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fixe\r\n    |elif mount = 1:\r\n        rotatif\r\n    |elif mount = 2:\r\n        montage tourelle\r\n    }\r\n}\r\n{event.module.class}-{event.module.grade},\r\n depuis votre stock pour {event.price} crédits.",
      "default": false,
      "name": "Module sold from storage",
      "description": "Triggered when selling a module from storage"
    },
    "Module stored": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Yvous avez stocké votre {event.module.LocalName}\r\n\r\n{if type(event.module.mount) != \"void\":\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fixe\r\n    |elif mount = 1:\r\n        rotatif\r\n    |elif mount = 2:\r\n        montage tourelle\r\n    }\r\n}\r\n{event.module.class}-{event.module.grade}\r\n\r\n{if type(event.cost) = \"void\": . |else: pour un cout de {event.cost} crédits.}",
      "default": false,
      "name": "Module stored",
      "description": "Triggered when you store a module"
    },
    "Module swapped": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "You have swapped the positions of a {event.frommodule.class}-{event.frommodule.grade},\r\n\r\n{if type(event.frommodule.mount) != \"void\":\r\n    {for index, value in event.frommodule.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fixed\r\n    |elif mount = 1:\r\n        giimballed\r\n    |elif mount = 2:\r\n        turreted\r\n    }\r\n}\r\n\r\n{event.frommodule.name} and \r\n\r\n{if event.tomodule:\r\n    a {event.tomodule.class}-{event.tomodule.grade},\r\n    {if type(event.tomodule.mount) != \"void\":\r\n        {for index, value in event.tomodule.mount: {set mount to value}}\r\n        {if mount = 0:\r\n            fixed\r\n        |elif mount = 1:\r\n            giimballed\r\n        |elif mount = 2:\r\n            turreted\r\n        }\r\n    }\r\n    {event.tomodule.name}.\r\n|else: \r\n    an empty slot.\r\n}",
      "default": true,
      "name": "Module swapped",
      "description": "Triggered when modules are swapped between slots on the ship"
    },
    "Module transfer": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "You have transferred a {event.module.class}-{event.module.grade}\r\n\r\n{if event.module.mount:\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fixed\r\n    |elif mount = 1:\r\n        giimballed\r\n    |elif mount = 2:\r\n        turreted\r\n    }\r\n}\r\n\r\n{event.module.name} \r\n\r\n{if event.transfercost: for a cost of {event.transfercost} credits.}\r\n\r\n{set t_remaining to event.transfertime}\r\n\r\n{if t_remaining:\r\n\r\n   {Pause(1000)}\r\n   Expected arrival in:\r\n\r\n   {if t_remaining > (60*60*24):\r\n      {set t_days to floor(t_remaining/(60*60*24))}\r\n      {t_days} days,\r\n      {set t_remaining to t_remaining-(t_days*(60*60*24))}\r\n   }\r\n\r\n   {if t_remaining > 3600:\r\n      {set t_hours to floor(t_remaining/3600)}\r\n      {t_hours} hours,\r\n      {set t_remaining to t_remaining-(t_hours*(60*60))}\r\n   }\r\n\r\n   {if t_remaining > 60:\r\n      {if t_days || t_hours: and}\r\n      {set t_minutes to round(t_remaining/(60),0)}\r\n      {t_minutes} minutes.\r\n   }\r\n}{P(event.system)}",
      "default": false,
      "name": "Module transfer",
      "description": "Triggered when you transfer a module from storage at another station"
    },
    "Modules stored": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "You have stored the following modules:\r\n\r\n{for module in event.modules:\r\n\r\n    {module.class}-{module.grade},\r\n\r\n    {if type(module.mount) != \"void\":\r\n        {for index, value in module.mount: {set mount to value}}\r\n        {if mount = 0:\r\n            fixed\r\n        |elif mount = 1:\r\n            giimballed\r\n        |elif mount = 2:\r\n            turreted\r\n        }\r\n    }\r\n    {module.name}\r\n    {Pause(400)}\r\n}\r\n\r\n\r\n",
      "default": true,
      "name": "Modules stored",
      "description": "Triggered when you store multiple modules"
    },
    "Music": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Music",
      "description": "Triggered when the game music 'mood' changes"
    },
    "Nav beacon scan": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context _}\r\n{SetState('eddi_context_last_subject', 'nav beacon')}\r\n{SetState('eddi_context_last_action', 'scan')}\r\n{SetState('eddi_context_star_system', system.name)}\r\n{SetState('eddi_context_nav_scans', event.numbodies)}\r\n\r\n{set nav to OneOf(\"Nahv\", \"de navigation\")}\r\n{set beacon to OneOf(\"Cette balise\", \"Cette bouée\", \"Ce signal\", \"Ce podh\", \"Ce Phare\")}\r\n{OneOf(\"{beacon} {nav} ma transmis des informations sur {event.numbodies} planètes dans ce système.\",\r\n\"Réception de données concernant {event.numbodies} planètes et autres éléments de ce système.\",\r\n\"Je reçoit des données concernant {event.numbodies} corps céleste de la {beacon} {nav}.\")}\r\n{SetState(\"Nbre_Objects\", 0)}\r\n{SetState(\"Beacon_System\", system.name)}\r\n",
      "default": false,
      "name": "Nav beacon scan",
      "description": "Triggered when you scan a nav beacon, before the scan data for all the bodies in the system is written into the journal"
    },
    "NPC attack commenced": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Alerte: \r\n{set Attaque1 to \"{if event.by: {event.by} |else: on} vous attaque!\"}\r\n{set Attaque2 to \"attaque {if event.by: de {event.by}} detectée.\"}\r\n\r\n{OneOf(Attaque1, Attaque2)}",
      "default": false,
      "name": "NPC attack commenced",
      "description": "Triggered when an attack on your ship by an NPC is detected"
    },
    "NPC cargo scan commenced": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ See if we are carrying non-limpet cargo}\r\n{set carryingvaluablecargo to 0}\r\n{for cargo in ship.cargo:\r\n    {if cargo.commodity != 'Limpet':\r\n        {set carryingvaluablecargo to 1}\r\n    }\r\n}\r\n\r\n{if carryingvaluablecargo = 1:\r\n  Attention: scan de cargaison\r\n  {if event.by:\r\n    de {event.by} \r\n  }\r\n  detectée.\r\n}",
      "default": false,
      "name": "NPC cargo scan commenced",
      "description": "Triggered when a cargo scan on your ship by an NPC is detected"
    },
    "NPC interdiction commenced": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Alerte: tentative dinterdiction\r\n{if event.by:\r\n   par {event.by} \r\n}\r\ndetectée.\r\n\r\n{Occasionally(3, \"Puissance à 0 ou tentez de vous évader\")}.",
      "default": false,
      "name": "NPC interdiction commenced",
      "description": "Triggered when an interdiction attempt on your ship by an NPC is detected"
    },
    "Power commodity delivered": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.amount} unités de {event.commodity} livrées {Occasionally(2, \"pour {P(event.power)}\")}.",
      "default": false,
      "name": "Power commodity delivered",
      "description": "Triggered when a commander delivers a commodity to a power"
    },
    "Power commodity fast tracked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Humanise(event.amount)} crédits utilisés pour achat suplémentaires {Occasionally(2, \"pour {P(event.power)}\")}.",
      "default": false,
      "name": "Power commodity fast tracked",
      "description": "Triggered when a commander fast tracks a commodity of a power"
    },
    "Power commodity obtained": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.amount} unités de {event.commodity} obtenues {Occasionally(2, \"de {P(event.power)}\")}.",
      "default": false,
      "name": "Power commodity obtained",
      "description": "Triggered when a commander obtains a commodity from a power"
    },
    "Power defected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Vous avez quité {P(event.frompower)} pour rejoindre {P(event.topower)}.",
      "default": false,
      "name": "Power defected",
      "description": "Triggered when you defect from one power to another"
    },
    "Power expansion vote cast": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Vote\r\n{OneOf(\"envoyé\", \"enregistré\", \"validé\")}",
      "default": false,
      "name": "Power expansion vote cast",
      "description": "Triggered when a commander votes for system expansion"
    },
    "Power joined": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Vous avez intégré les rangs de {P(event.power)}.",
      "default": false,
      "name": "Power joined",
      "description": "Triggered when you join a power"
    },
    "Power left": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Vous ne faites plus parti des affiliés à  {P(event.power)}.",
      "default": false,
      "name": "Power left",
      "description": "Triggered when you leave a power"
    },
    "Power preparation vote cast": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Vote\r\n{OneOf(\"envoyé\", \"enregistré\")}",
      "default": false,
      "name": "Power preparation vote cast",
      "description": "Triggered when a commander votes for system perparation"
    },
    "Power salary claimed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Salaire de {Humanise(event.amount)}  credits obtenus {Occasionally(2, \"de {P(event.power)}\")}.",
      "default": false,
      "name": "Power salary claimed",
      "description": "Triggered when a commander claims salary from a power"
    },
    "Power voucher received": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Power voucher received",
      "description": "Triggered when a commander turns in combat vouchers against an opposing power"
    },
    "Repair drone": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set systemsrepaired to []}\r\n\r\n{if event.hull:\r\n   {set systemsrepaired to cat(systemsrepaired, [\"la coque\"])} \r\n}\r\n{if event.cockpit:\r\n   {set systemsrepaired to cat(systemsrepaired, [\"la verrière\"])} \r\n}\r\n{if event.corrosion:\r\n   {set systemsrepaired to cat(systemsrepaired, [OneOf(\"les systèmes corrodés\", \"les systèmes atteints de corrosion\")])} \r\n}\r\n\r\n{if len(systemsrepaired) > 0:\r\n\r\n    {set remote to Occasionally(2, OneOf(\"autonome\",\"semi-otomatique\"))}\r\n    {set sequence to OneOf(\"la séquence\", \"le cycle\")}\r\n    {OneOf(\r\n        \"les drones ont fini leur reparations sur\", \r\n        \"{sequence} {remote} est terminé, réparations effectuées sur\"\r\n    )}\r\n\r\n    {set cur to 0}\r\n    {while cur < len(systemsrepaired):\r\n        {if cur = 0:\r\n        |elif cur < len(systemsrepaired) - 1:\r\n            , \r\n        |else:\r\n            et\r\n        }\r\n        {systemsrepaired[cur]}\r\n        {set cur to cur + 1}\r\n    }\r\n}.\r\n",
      "default": false,
      "name": "Repair drone",
      "description": "Triggered when your ship is repaired via a repair limpet controller"
    },
    "Repeat last speech": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{state.eddi_context_last_speech}",
      "default": true,
      "name": "Repeat last speech",
      "description": "Repeat the last thing said"
    },
    "Screenshot": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Screenshot",
      "description": "Triggered when you take a screenshot"
    },
    "Search and rescue": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "La récompense pour \r\n{event.amount} \r\n{if event.commodity.rare: rare}\r\n\r\n{if event.commodity.name = \"Black Box\":\r\n   {if event.amount > 1:\r\n      {OneOf(\"enregistreur de vol\", \"boite noire\")}\r\n   |else: \r\n      {OneOf(\"enregistreurs de vols\", \"boites noires\")}\r\n   }\r\n\r\n|elif event.commodity.name = \"Damaged Escape Pod\":\r\n   {OneOf(\"nacelle cryogénique endomagée\", \"nacelle de sauvetage endommagée\")}{if event.amount > 1:s}\r\n\r\n|elif event.commodity.name = \"Occupied Escape Pod\":\r\n   {OneOf(\"nacelle de sauvetage occupée\", \"nacelle cryogénique occupée\")}{if event.amount > 1:s}\r\n\r\n|elif event.commodity.name = \"Personal Effects\":\r\n   {if event.amount > 1:des |else un} {OneOf(\"set\", \"lot\")}{if event.amount > 1:s} \r\n   {OneOf(\"d'effets personnels\", \"d'obgets personnels\")}\r\n\r\n|elif event.commodity.name = \"Salvageable Wreckage\":\r\n   {set fragment to OneOf(\"fragment\", \"brisure\", \"morceau\", \"partie\", \"reste\", \"lambeau\", \"chicot\")}\r\n   {set wreckage to OneOf(\"d'épave\", \"de débris\")}\r\n   {fragment}{if event.amount > 1:s} {wreckage}\r\n\r\n|elif event.commodity.name = \"Hostage\":\r\n   {OneOf(\"otage\", \"prisonnier\", \"captif\")}{if event.amount > 1:s}\r\n\r\n|else:\r\n   {event.commodity.LocalName}{if event.amount > 1:s}\r\n}\r\nque vous avez \r\n{OneOf(\"récupéré\", \"rapporté\")}\r\n{Occasionally(2, \"est\")}\r\nde {Humanise(event.reward)} crédits\r\n",
      "default": false,
      "name": "Search and rescue",
      "description": "Triggered when delivering items to a Search and Rescue contact"
    },
    "Security presence report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{if system.population > 0:\r\n    Il y a \r\n    {if system.security = \"None\":\r\n        aucune présence\r\n  {OneOf(\"policière\", \"des forces de sécurités\", \"de représentatnts de la loi\")} \r\n    |elif system.security = \"Low\":\r\n        présence \r\n  {OneOf(\"policière\", \"des forces de sécurités\", \"de représentatnts de la loi\")}   \r\n  {OneOf(\"est au minimum\", \"vraiment faible\", \"légère\")}\r\n    |elif system.security = \"Medium\":\r\n        présence \r\n  {OneOf(\"policière\", \"des forces de sécurités\", \"de représentatnts de la loi\")} \r\n        {OneOf(\"standard\", \"moyenne\", \"normale\")}\r\n    |elif system.security = \"High\":\r\n        présence \r\n  {OneOf(\"policière\", \"des forces de sécurités\", \"de représentatnts de la loi\")} \r\n        {OneOf(\"élevée\", \"lourde\", \"forte\")}\r\n    |else:\r\n        présence \r\n  {OneOf(\"policière\", \"des forces de sécurités\", \"de représentatnts de la loi\")} \r\n       {system.security}\r\n    }\r\n {OneOf(\"ici\", \"dans ce système\", \"dans les environs\")}.\r\n}",
      "default": false,
      "name": "Security presence report",
      "description": "Function to report on the details of system security"
    },
    "Self destruct": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Séquence d'auto-destruction enclenchée...\r\n...\r\npensez à évacuer...",
      "default": false,
      "name": "Self destruct",
      "description": "Triggered when you start the self destruct sequence"
    },
    "Settlement approached": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "En approche de {P(event.name)}.",
      "default": false,
      "name": "Settlement approached",
      "description": "Triggered when you approach a settlement"
    },
    "Shields down": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Alerte: les boucliers sont tombés.\r\nAttention à la gestion de l'énergie.",
      "default": false,
      "name": "Shields down",
      "description": "Triggered when your ship's shields go offline"
    },
    "Shields up": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Information: Bouclier réarmé en puissance minimale. \r\nCondensateurs en charge linéaire.",
      "default": false,
      "name": "Shields up",
      "description": "Triggered when your ship's shields come online"
    },
    "Ship arrived": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2, '{F(\\'Honorific\\')}, ')}\r\nvotre {event.ship} \r\n\r\n{OneOf('est arrivé {if event.system && event.station: \\'à\\')}', \r\n       'a fini son transfert {if event.system && event.station: \\'vers\\')}')}\r\n\r\n{if event.sytem != system.name && len(event.system) > 0 && len(event.station) > 0:\r\n   {event.station} in the {event.system} system\r\n|elif event.station != station.name && len(event.station) > 0:\r\n   {event.station}\r\n}.",
      "default": false,
      "name": "Ship arrived",
      "description": "Triggered when you complete a ship transfer"
    },
    "Ship delivered": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{ShipCallsign()} transfert terminé.",
      "default": false,
      "name": "Ship delivered",
      "description": "Triggered when your newly-purchased ship is delivered to you"
    },
    "Ship interdicted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship interdicted",
      "description": "Triggered when your ship is interdicted by another ship"
    },
    "Ship interdiction": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship interdiction",
      "description": "Triggered when you interdict another ship"
    },
    "Ship loadout": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship loadout",
      "description": "Triggered when you obtain the loadout of your ship"
    },
    "Ship purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{P(event.ship)} acheté.",
      "default": false,
      "name": "Ship purchased",
      "description": "Triggered when you purchase a ship"
    },
    "Ship rebooted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship rebooted",
      "description": "Triggered when you run reboot/repair on your ship"
    },
    "Ship refuelled": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.total:\r\n   {SetState('eddi_context_fuel_remaining', event.total)}\r\n|else:\r\n   {SetState('eddi_context_fuel_remaining', state.eddi_context_fuel_remaining + event.amount)}\r\n}\r\n\r\n{Pause(2000)}\r\n{if event.total = ship.fueltanktotalcapacity || event.price:\r\n   {set refueled_desc to OneOf(\"complètement remplis\", \"au max de leur capacité\",\"à 100% de capacité\")}\r\n   {OneOf(\"le ravitaillement est {refueled_desc}\", \"plein du {ShipName()} complet\", \"Réservoirs du {ShipName()} sont remplis\", \"les réservoirs de {P(ShipName())} sont désormais {refueled_desc}\" )}\r\n|else:\r\n   {if event.amount <= 5.0000:\r\n      {F('Fuel check')}\r\n   }\r\n}",
      "default": false,
      "name": "Ship refuelled",
      "description": "Triggered when you refuel your ship"
    },
    "Ship renamed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{ShipName()} maintenant enregistré auprés de {P(system.faction)}.  Identification {ICAO(event.ident)}.",
      "default": false,
      "name": "Ship renamed",
      "description": "Triggered when you rename a ship"
    },
    "Ship repaired": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{ShipName()} réparé.",
      "default": false,
      "name": "Ship repaired",
      "description": "Triggered when you repair your ship"
    },
    "Ship repurchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship repurchased",
      "description": "Triggered when you repurchase your ship"
    },
    "Ship restocked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{ShipName()} {OneOf(\"Réaprovisionné\",\"réarmé\")}.",
      "default": false,
      "name": "Ship restocked",
      "description": "Triggered when you restock your ship's ammunition"
    },
    "Ship shutdown": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Plantage complet système, tout sur OFF.",
      "default": false,
      "name": "Ship shutdown",
      "description": "Triggered when your ship's system are shutdown"
    },
    "Ship sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Le {ShipName(event.shipid, event.ship)} {OneOf('sort du service actif','prend sa retraite')}\",\r\n             \"Mise hors service du {ShipName(event.shipid, event.ship)}\",\r\n             \"vente du {ShipName(event.shipid, event.ship)}\",)}\r\nPour la somme de {event.price} crédits.",
      "default": false,
      "name": "Ship sold",
      "description": "Triggered when you sell a ship"
    },
    "Ship sold on rebuy": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.ship}, identification {event.shipid}, vendu dans le système {event.system} pour {Humanise(event.price)} credits.",
      "default": false,
      "name": "Ship sold on rebuy",
      "description": "Triggered when you sell a ship to raise funds on the insurance / rebuy screen"
    },
    "Ship swapped": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.storedship:\r\n    {OneOf(\"Storing\", \"Mothballing\", \"Parking\")} {ShipName(event.storedshipid, event.storedship)} and\r\n|elif event.soldship:\r\n    Selling {ShipName(event.soldshipid, event.soldship)} and\r\n}\r\n{OneOf(\"swapping\",\"moving\",\"transferring\")} to {ShipName(event.shipid, event.ship)}.\r\n\r\n{F(\"Limpet check\")}\r\n{F(\"List launchbays\")}\r\n\r\n{set fighterhangar to false}\r\n{for compartment in ship.compartments:\r\n    {if find(compartment.module.name, \"Fighter Hangar\") != -1:\r\n        {set fighterhangar to true}\r\n    }\r\n}\r\n{if fighterhangar = true:\r\n    Reminder: you need to assign a crew member to active duty.\r\n}\r\n",
      "default": true,
      "name": "Ship swapped",
      "description": "Triggered when you swap a ship"
    },
    "Ship transfer initiated": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{ShipName(event.shipid, event.ship)} {OneOf(\"en chemin de\",\"transéré depuis\", \"transfert amorcé depuis\", \"est transporté depuis\", \"va arriver de\")} {P(event.system)}.\r\n{set t_remaining to event.time}\r\n\r\n{if t_remaining:\r\n\r\n   {Pause(1000)}\r\n   Arrivée attendu dans:\r\n\r\n   {if t_remaining > (60*60*24):\r\n      {set t_days to floor(t_remaining/(60*60*24))}\r\n      {t_days} jours,\r\n      {set t_remaining to t_remaining-(t_days*(60*60*24))}\r\n   }\r\n\r\n   {if t_remaining > 3600:\r\n      {set t_hours to floor(t_remaining/3600)}\r\n      {t_hours} heures,\r\n      {set t_remaining to t_remaining-(t_hours*(60*60))}\r\n   }\r\n\r\n   {if t_remaining > 60:\r\n      {if t_days || t_hours: and}\r\n      {set t_minutes to round(t_remaining/(60),0)}\r\n      {t_minutes} minutes.\r\n   }\r\n}",
      "default": false,
      "name": "Ship transfer initiated",
      "description": "Triggered when you initiate a ship transfer"
    },
    "SRV docked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Buggy\", \"SRV\")} {OneOf(\"rentré\", \"parké\", \"rangé\", \"docké\")}.",
      "default": false,
      "name": "SRV docked",
      "description": "Triggered when you dock an SRV with your ship"
    },
    "SRV launched": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Buggy\", \"SRV\")} {OneOf(\"largué\", \"en partance\")}.",
      "default": false,
      "name": "SRV launched",
      "description": "Triggered when you launch an SRV from your ship"
    },
    "Star report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{_ set reportbody to BodyDetails(state.eddi_context_star_star, state.eddi_context_star_system)}\r\n\r\n\r\n\r\n\r\n \r\n {set Bodies to []}\r\n {for Bodies in system.bodies:\r\n  {if Bodies.name = state.eddi_context_star_star: {set reportbody to Bodies} }\r\n }\r\n\r\n {set LuminosityClass to Spacialise(reportbody.luminosityclass)}\r\n\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    Je ne voit pas de quelle étoile vous demandez des données.\r\n|else:\r\n    {set mainsequence to 0}\r\n    {set QualityRing to event.reserves}\r\n {set NbreRing to len(reportbody.rings)}\r\n {set WithCluster to false}\r\n {set WithRing to false}\r\n {for Rings in reportbody.rings:\r\n  {if find(Rings.name , \"Belt\") >= 0:\r\n   {set WithCluster to true}\r\n  |elif  find(Rings.name , \"Ring\") >= 0:\r\n   {set WithRing to true}\r\n  }\r\n  }\r\n\r\n\r\n    {if reportbody.stellarclass = \"O\":\r\n        étoile de type oh, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}... . \r\n  Il s’agit d’étoiles extrêmes.  les plus chaudes, les plus bleues, les plus brillantes, les plus massives… et rares! Le système de classement de type O est ouvert: il peut évoluer selon les découvertes.\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"B\":\r\n        Une étoile de type Bé,  {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}... . Ces étoiles sont de véritables phares dans le ciel: parmi les 100 étoiles les plus brillantes, un tier sont des étoiles de type B. Ces étoiles sont très chaudes, bleues et émettent de fortes radiations ultraviolettes.\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"A\":\r\n        Une étoile de type ah,  {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}... . Étoiles blanches assez répandues.\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"F\":\r\n        Une étoile de type èfe,  {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}... . Étoiles blanc-jaune assez répandues.\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"G\":\r\n        Une étoile de type gé,  {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}... . Étoiles jaunes comme il y a pour le système Sol.\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"K\":\r\n        Une étoile de type Ka,  {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}... . Étoiles orange très répandu.\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"M\":\r\n        Une étoile de type ème,  {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}... . Étoiles rouges et froides dont les plus connues sont Betelgueuse ou Antarès.  Toutes les étoiles M visibles à l’œil nu sont des supergéantes.\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"L\":\r\n        étoile de type elle,  {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}... . Étoile de couleur rouge très foncé et illuminent surtout dans l’infrarouge. Leurs gaz sont assez froids pour que les hydrures de métaux et les métaux alcalins prédominent dans leur spectre.\r\n    |elif reportbody.stellarclass = \"T\":\r\n        une naine brune Té,  {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}... . Étoiles à peine assez massives pour pouvoir effectuer des réactions nucléaires. Elles émettent peu ou pas de lumière, mais seulement des infrarouges. \r\n    |elif reportbody.stellarclass = \"Y\":\r\n        Naine brune Igrec,  {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}.... elles se trouvent à l’extrémité de l’échelle, elles sont plus froides que celles de la classe spectrale T.\r\n    |elif reportbody.stellarclass = \"TTS\":\r\n        une étoile Té tauri,  {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....  en phase de contraction gravitationnelle\r\n    |elif reportbody.stellarclass = \"AeBe\":\r\n        une proto étoile très jeune pour être en position principale {Occasionally(4, \"mais pourrai devenir une étoile de type Ah ou Bé\")}.,  {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}.... \r\n    |elif reportbody.stellarclass = \"W\":\r\n        une étoile de type doublevé,  {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....  est plutôt agée {Occasionally(4, \"approchant de sa fin de vie et ne consommant plus d'hydrogène\")}.\r\n    |elif reportbody.stellarclass = \"WN\":\r\n        une étoile agée de type W N,  {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....  {Occasionally(4, \"approchant de sa fin de vie et ne consommant plus d'hydrogène\")}.\r\n    |elif reportbody.stellarclass = \"WNC\":\r\n        une étoile agée de type W N C,  {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}.... {Occasionally(4, \"approchant de sa fin de vie et ne consommant plus d'hydrogène\")}.\r\n    |elif reportbody.stellarclass = \"WC\":\r\n        une étoile agée de type W C? {Occasionally(4, \"approchant de sa fin de vie et ne consommant plus d'hydrogène\")}.  {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}...\r\n    |elif reportbody.stellarclass = \"WO\":\r\n        une étoile agée de type w o,  {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....  {Occasionally(4, \"approchant de sa fin de vie et ne consommant plus d'hydrogène\")}.\r\n    |elif reportbody.stellarclass = \"CS\":\r\n        une étoile carbonnée de type C S,  {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}.... \r\n    |elif reportbody.stellarclass = \"C\":\r\n        une étoile carbonnée de type C, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....  {Occasionally(2, \"basse-séquence\")} {Occasionally(4, \"avec une atmosphère principalement de carbone\")}.\r\n    |elif reportbody.stellarclass = \"CN\":\r\n        une étoile carbonnée de type C N,  {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....  {Occasionally(2, \"basse-séquence\")} {Occasionally(4, \"avec une atmosphère principalement de carbone\")}.\r\n    |elif reportbody.stellarclass = \"CJ\":\r\n        une étoile carbonnée de type C J,  {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....  {Occasionally(2, \"basse-séquence\")} {Occasionally(2, \"avec une atmosphère principalement de carbone\")}.\r\n    |elif reportbody.stellarclass = \"CH\":\r\n        une étoile carbonnée de type C H, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....  {Occasionally(2, \"basse-séquence\")} {Occasionally(4, \"avec une atmosphère principalement de carbone\")}.\r\n    |elif reportbody.stellarclass = \"CHd\":\r\n        une étoile carbonnée de type C H D, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....  {Occasionally(2, \"basse-séquence\")} {Occasionally(4, \"avec une atmosphère principalement de carbone\")}.\r\n    |elif reportbody.stellarclass = \"MS\":\r\n        une étoile basses séquence de type M S, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....  {Occasionally(4, \"qui était une étoile de type M et deviendra une étoile carbonnéer\")}.\r\n    |elif reportbody.stellarclass = \"S\":\r\n        une étoile basses séquence de type esse, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....  {Occasionally(4, \"qui était une étaoile de type èm et deviendra une étoile carbonnéer\")}.\r\n    |elif reportbody.stellarclass = \"D\":\r\n        Une naine blanche de type dé, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}.....\r\n    |elif reportbody.stellarclass = \"DA\":\r\n        une naine blanche de type dé ah, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....  {Occasionally(4, \"avec une atmosphere riche en hydrogène\")}\r\n    |elif reportbody.stellarclass = \"DAB\":\r\n        une naine blanche de type D A B, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}.... {Occasionally(4, \"avec une atmosphere riche en hydrogène\")}.\r\n    |elif reportbody.stellarclass = \"DAO\":\r\n        Une naine blanche, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....\r\n    |elif reportbody.stellarclass = \"DAZ\":\r\n        Une naine blanche, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....\r\n    |elif reportbody.stellarclass = \"DAV\":\r\n        Une naine blanche, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}.... \r\n    |elif reportbody.stellarclass = \"DB\":\r\n        Une naine blanche, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}.... \r\n    |elif reportbody.stellarclass = \"DBZ\":\r\n        Une naine blanche, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}.... \r\n    |elif reportbody.stellarclass = \"DBV\":\r\n        Une naine blanche, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}.... \r\n    |elif reportbody.stellarclass = \"DO\":\r\n        Une naine blanche? {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....\r\n    |elif reportbody.stellarclass = \"DOV\":\r\n        Une naine blanche, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....\r\n    |elif reportbody.stellarclass = \"DQ\":\r\n        Une naine blanche, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....\r\n    |elif reportbody.stellarclass = \"DC\":\r\n        Une naine blanche, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}.... \r\n    |elif reportbody.stellarclass = \"DCV\":\r\n        Une naine blanche, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}.... \r\n    |elif reportbody.stellarclass = \"DX\":\r\n        Une naine blanche, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....\r\n    |elif reportbody.stellarclass = \"N\":\r\n        une étoile à neutron , {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}..... {Occasionally(4, \"qui a un noyau dangeureusement dense\")}.\r\n    |elif reportbody.stellarclass = \"H\":\r\n        un trou noir.\r\n    |elif reportbody.stellarclass = \"X\":\r\n        une entité stélaire exotique.\r\n    |elif reportbody.stellarclass = \"SuperMassiveBlackHole\":\r\n         une trou noir supermassif.\r\n    |elif reportbody.stellarclass = \"A_BlueWhiteSuperGiant\":\r\n        une bleue-blanc supermassive, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....  {Occasionally(4, \"qui continura son extention jusqu'à devenir une super géante rouge\")}.\r\n    |elif reportbody.stellarclass = \"F_WhiteSuperGiant\":\r\n        une blanc-jaune supermassive, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....  {Occasionally(4, \"qui continura son extention jusqu'à devenir une super géante rouge\")}\r\n    |elif reportbody.stellarclass = \"M_RedSuperGiant\":\r\n        une super géante rouge, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}.... {Occasionally(4, \"en phase de consomation d'hélium\")}.\r\n    |elif reportbody.stellarclass = \"M_RedGiant\":\r\n        une géante rouge, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}....  {Occasionally(4, \"qui continu son évolution vers la super géante rouge\")}.\r\n    |elif reportbody.stellarclass = \"K_OrangeGiant\":\r\n        une géante orange, {if len(LuminosityClass)>0 : de classe de luminosité {LuminosityClass}}.... {Occasionally(4, \"qui continue à ce développer ainsi jusqu'à sa mort\")}.\r\n    |elif reportbody.stellarclass = \"RoguePlanet\":\r\n        a rogue planet\r\n    |elif reportbody.stellarclass = \"Nebula\":\r\n        une nébuleuse.\r\n    |elif reportbody.stellarclass = \"StellarRemnantNebula\":\r\n        un vestige de nébuleuse.\r\n    }\r\n    {set ageInYears to reportbody.age * 1000000\r\n    {OneOf(\"qui a {Humanise(ageInYears)} années\",\r\n           \"née depuis {Humanise(ageInYears)} ans\",\r\n           \"d'un àge estimè à {Humanise(ageInYears)} ans\",\r\n    )},\r\n \r\n \r\n    {if ageInYears < 1000000:\r\n        ce qui en fait ne des plus jeune de la galaxie.\r\n    |elif ageInYears >14000000000:\r\n        ce qui fait d'elle une des plus vieille de la galaxie.\r\n    }.\r\n\r\n{if NbreRing > 0:\r\n  Avec\r\n {if WithCluster:\r\n  Quelques champs d'astéroïdes\r\n    {if WithRing: et }\r\n }\r\n}\r\n{if NbreRing > 0:\r\n  {NbreRing} anneau de type\r\n  {set ringcomposition to []}\r\n        {for Ring in reportbody.rings:\r\n   {set ringcomposition to cat(ringcomposition, [Ring.LocalComposition])}\r\n        }\r\n        {if len(ringcomposition)= 1:\r\n   {ringcomposition[0]}\r\n        |elif len(ringcomposition) = 2:            \r\n   {ringcomposition[0]} pour le premier et de \r\n   {ringcomposition[1]} pour le second.\r\n        |elif len(ringcomposition) > 2:\r\n            {set cur to 0}\r\n            {while cur < len(reportbody.rings):\r\n                {if cur = 0:                    \r\n     {ringcomposition[cur]}\r\n                |elif cur < len(ringcomposition) - 1:\r\n                    , de {ringcomposition[cur]}  \r\n                |else:\r\n                    , et de {ringcomposition[cur]} pour le dernier\r\n                }\r\n                {set cur to cur + 1}\r\n            }\r\n        }\r\n        {if find(QualityRing , \"Pristine\") >= 0:\r\n            {OneOf(\"et étant inexploités jusqu'à présent\", \"étant vierge de toutes exploitation industrielle\", \"avec une concentration majeure de matière dedans\", \"avec une concentration très richede matière dedans\", \"avec de trés grandes réserves de matière dedans\")} \r\n        |elif find(QualityRing , \"Major\") >= 0:\r\n            {OneOf(\"avec concentrations riche\", \"avec haute concentration\", \"avec un Haut niveau\", \"avec de fortes réserves\", \"avec de grandes réserves\")} de matière dedans\r\n  |elif find(QualityRing , \"Common\") >= 0:\r\n            {OneOf(\"ayant concentrations moyenne de matière dedans\", \"une quantité standard de matière dedans\", \"quelques matières exploitables dedans\")} \r\n  |elif find(QualityRing , \"Low\") >= 0:\r\n            {OneOf(\"peu de matières exploitables dedans\", \"une faible quantité de matière dedans\", \"une faible concentration de matière dedans\")} \r\n  |elif find(QualityRing , \"Depleted\") >= 0:\r\n            {OneOf(\"presque plus de matières exploitables dedans\", \"quelques échantillons de matières dedans\", \"presque plus que de la poussière de matières exploitables dedans\")} \r\n\r\n  }...\r\n    }\r\n\r\n    \r\n\r\n\r\n \r\n    {if mainsequence = 1:\r\n        {OneOf('.','.','Comme vous pouvez le constater, elle émet une lumière {reportbody.LocalChromaticity} \r\n\r\n        {set notables to []}\r\n\r\n        {if reportbody.massprobability < 0.01:\r\n            {set notables to cat(notables, [cat(\"une masse solaire incroyablement faible de \", Humanise(reportbody.solarmass))])}\r\n        |elif reportbody.massprobability <0.1:\r\n            {set notables to cat(notables, [cat(\"une masse solaire faible de \", Humanise(reportbody.solarmass))])}\r\n        |elif reportbody.massprobability <1:\r\n            {set notables to cat(notables, [\"une masse solaire peu courante de \"])}\r\n        |elif reportbody.massprobability <10:\r\n            {set notables to cat(notables, [\"une masse solaire inférieure à la myenne\"])}\r\n        |elif reportbody.massprobability > 99.99:\r\n            {set notables to cat(notables, [cat(\"une masse solaire incroyablement haute de \", Humanise(reportbody.solarmass))])}\r\n        |elif reportbody.massprobability > 99.9:\r\n            {set notables to cat(notables, [cat(\"une masse solaire extrèmement haute de \", Humanise(reportbody.solarmass))])}\r\n        |elif reportbody.massprobability > 99:\r\n            {set notables to cat(notables, [\"une masse solaire particulièrement haute de \"])}\r\n        |elif reportbody.massprobability > 90:\r\n            {set notables to cat(notables, [\"une masse solaire juste au dessus de la moyenne\"])}\r\n        }\r\n\r\n        {if reportbody.radiusprobability < 0.01:\r\n            {set notables to cat(notables, [cat(\"Un rayon solaire incroyablement bas de \", Humanise(reportbody.solarradius))])}\r\n        |elif reportbody.radiusprobability <0.1:\r\n            {set notables to cat(notables, [cat(\"Un rayon solaire extrêmement faible de \", Humanise(reportbody.solarradius))])}\r\n        |elif reportbody.radiusprobability <1:\r\n            {set notables to cat(notables, [\"Un rayon solaire exceptionnellement faible\"])}\r\n        |elif reportbody.radiusprobability <10:\r\n            {set notables to cat(notables, [\"Rayon solaire inférieur à la moyenne\"])}\r\n        |elif reportbody.radiusprobability > 99.99:\r\n            {set notables to cat(notables, [cat(\"Un rayon solaire extrêmement élevé de \", Humanise(reportbody.solarradius))])}\r\n        |elif reportbody.radiusprobability > 99.9:\r\n            {set notables to cat(notables, [cat(\"Un rayon solaire incroyablement élevé de \", Humanise(reportbody.solarradius))])}\r\n        |elif reportbody.radiusprobability > 99:\r\n            {set notables to cat(notables, [\"Un rayon solaire exceptionnellement élevé\"])}\r\n        |elif reportbody.radiusprobability > 90:\r\n            {set notables to cat(notables, [\"un rayon solaire plus grand que la moyenne\"])}\r\n        }\r\n        {set temp to reportbody.temperature - 273.15} \r\n        {if reportbody.tempprobability < 0.01:\r\n            {set notables to cat(notables, [cat(\"Une température de surface incroyablement basse de \", Humanise(temp), \" Degrés Celsius\")])}\r\n        |elif reportbody.tempprobability <0.1:\r\n            {set notables to cat(notables, [cat(\"Une température superficielle extrêmement faible de \", Humanise(temp), \" Degrés Celsius\")])}\r\n        |elif reportbody.tempprobability <1:\r\n            {set notables to cat(notables, [\"Une température de surface exceptionnellement faible\"])}\r\n        |elif reportbody.tempprobability <10:\r\n            {set notables to cat(notables, [\"Température de surface inférieure à la moyenne\"])}\r\n        |elif reportbody.tempprobability > 99.99:\r\n            {set notables to cat(notables, [cat(\"Une température de surface extrêmement élevée de \", Humanise(temp), \" Degrés Celsius\")])}\r\n        |elif reportbody.tempprobability > 99.9:\r\n            {set notables to cat(notables, [cat(\"Une température de surface incroyablement élevée de \", Humanise(temp), \" Degrés Celsius\")])}\r\n        |elif reportbody.tempprobability > 99:\r\n            {set notables to cat(notables, [\"Une température de surface exceptionnellement élevée\"])}\r\n        |elif reportbody.tempprobability > 90:\r\n            {set notables to cat(notables, [\"Température de surface supérieure à la moyenne\"])}\r\n        }\r\n\r\n        {if len(notables) = 0:\r\n            {OneOf(\"\", \"un exemple classique de ce type d'étoile.\", \"Rien de particulier relevé sur cette étoile.\", \"rapport de particularité èr ah ess.\")}\r\n        |else:\r\n            {OneOf('comparé aux autres étoiles de ce type', 'en comparaison aux autres étoiles {reportbody.stellarclass} ', 'par rapport aux autres étoiles {reportbody.stellarclass} ')}, celle ci est \r\n            {if len(notables) = 1:\r\n                remarquable pour avoir {notables[0]}.\r\n            |elif len(notables) = 2:\r\n                {OneOf('intéressante', 'inhabituelle')}, avec {notables[0]} et {notables[1]}.\r\n            |elif len(notables) = 3:\r\n                {OneOf('exceptionnelle', 'remarquable')}, avec {notables[0]}, {notables[1]} et {notables[2]}.\r\n            }\r\n        }\r\n    }    \r\n} ",
      "default": false,
      "name": "Star report",
      "description": "Function to report on the details of the contextual body"
    },
    "Star scanned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'star')}\r\n{SetState('eddi_context_last_action', 'scan')}\r\n{SetState('eddi_context_star_system', system.name)}\r\n{SetState('eddi_context_star_star', event.name)}\r\n\r\n{Pause(1000)}\r\n\r\nScann de létoile {P(event.name)} de classe {event.stellarclass}  terminé.\r\n\r\n{F(\"Star report\")}\r\n\r\n\r\n{if event.estimatedvalue:\r\n   Valeur estimée {OneOf(\"du scann\", \"de l'étude\", \"du sondage\")}: {event.estimatedvalue} crédits\r\n}\r\n\r\n\r\n{if (event.estimatedhabzoneinner && event.estimatedhabzoneouter) && \r\n (event.estimatedhabzoneinner > 0 && event.estimatedhabzoneouter> 0):\r\n   Zone habitable\r\n   {Occasionally(2, OneOf(\"calculatée de\", \"aux environs de \"))}: \r\n   {Humanise(event.estimatedhabzoneinner)} \r\n   à {Humanise(event.estimatedhabzoneouter)} \r\n   secondes lumières.\r\n|elif event.estimatedhabzoneouter && event.estimatedhabzoneouter > 0:\r\n   Zone habitable\r\n   {Occasionally(2, OneOf(\"claculé jusqu'à\", \"estimé jusqu'à\"))}: \r\n   {Humanise(event.estimatedhabzoneouter)} \r\n   secondes lumières maximum.\r\n}",
      "default": false,
      "name": "Star scanned",
      "description": "Triggered when you complete a scan of a stellar body"
    },
    "Station no fire zone entered": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Vous entrez dans une zone neutre. Assurez vous que vos armes soient bien rétractées.",
      "default": false,
      "name": "Station no fire zone entered",
      "description": "Triggered when your ship enters a station's no fire zone"
    },
    "Station no fire zone exited": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Vous sortez d'une zone neutre. {Occasionally(5, \"Assurez vous de n'être pas suivi ou attendu par vos ennemis.\")}",
      "default": false,
      "name": "Station no fire zone exited",
      "description": "Triggered when your ship exits a station's no fire zone"
    },
    "Station report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "Nothing of interest here.",
      "default": true,
      "name": "Station report",
      "description": "Function to report on the details of the current station"
    },
    "Swapout check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to find a given module in outfitting}\r\n{set outfitting(module) to:\r\n    {for outfittingmodule in station.outfitting:\r\n        {if outfittingmodule.EDDBID = module.EDDBID:\r\n            {return outfittingmodule}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Function to report if a module is cheaper in outfitting that on the ship}\r\n{set reportIfCheaper(shipmodule) to:\r\n    {_ Only consider if this has no modifications}\r\n    {if !shipmodule.modified:\r\n        {set outfittingmodule to outfitting(shipmodule)}\r\n        {if outfittingmodule:\r\n            {if outfittingmodule.price < shipmodule.price:\r\n                {set saving to shipmodule.price - outfittingmodule.price}\r\n                {_ Only bother if it's a relatively good saving}\r\n                {if saving / cmdr.credits > 0.001:\r\n                    Vous pouvez économiser {Humanise(saving)} crédits échangeant votre module {shipmodule.name} ici.\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{reportIfCheaper(ship.powerplant)}\r\n{reportIfCheaper(ship.thrusters)}\r\n{reportIfCheaper(ship.frameshiftdrive)}\r\n{reportIfCheaper(ship.lifesupport)}\r\n{reportIfCheaper(ship.powerdistributor)}\r\n{reportIfCheaper(ship.sensors)}\r\n{for hardpoint in ship.hardpoints:\r\n    {if hardpoint.module:\r\n        {reportIfCheaper(hardpoint.module)}\r\n    }\r\n}\r\n{for compartment in ship.compartments:\r\n    {if compartment.module:\r\n        {reportIfCheaper(compartment.module)}\r\n    }\r\n}",
      "default": false,
      "name": "Swapout check",
      "description": "Check to see if any fitted modules are available more cheaply here"
    },
    "Synthesised": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "\r\nUtilisation de\r\n{set cur to 0}\r\n{for material in event.materials:\r\n    {if cur=0:\r\n |elif cur=1 && len(event.materials)=3:,\r\n |else: et\r\n }\r\n    {material.amount} {material.LocalName}\r\n {set cur to cur+1}\r\n}\r\npour {OneOf('effectuer','procéder à','terminer')} la synthèse.\r\n\r\n",
      "default": false,
      "name": "Synthesised",
      "description": "Triggered when you synthesise something from materials"
    },
    "System distance report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{set reportsystem to SystemDetails(state.eddi_context_system_system)}\r\n\r\n{if !reportsystem.name || reportbody.name = \"\":\r\n    Je ne vois pas de quel système vous voulez parler.\r\n|else:\r\n    La distance vers {P(reportsystem.name)} est de {Humanise(Distance(reportsystem.x, reportsystem.y, reportsystem.z, system.x, system.y, system.z))} années lumières.\r\n}",
      "default": false,
      "name": "System distance report",
      "description": "Function to report on the distance to the contextual system"
    },
    "System faction changed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n\r\n{SetState('eddi_context_last_subject', 'system')}\r\n{SetState('eddi_context_last_action', 'change_faction')}\r\n{SetState('eddi_context_system', event.system)}\r\n{SetState('eddi_context_system_system', event.system)}\r\n\r\n{_ Set up our system name}\r\n{if event.system = homesystem.name:\r\n  {set system to OneOf('{P(event.system)}',\r\n                       'Votre système habitat')}\r\n|elif event.system = system.name:\r\n  {set system to OneOf('{P(event.system)}',\r\n                       'ce système où vous êtes')}\r\n|else:\r\n  {set system to OneOf('le système {P(event.system)}'\r\n                       '{P(event.system)}')}\r\n}\r\n\r\n  {_ System has entered a new state}\r\n  {OneOf('Restez à la pointe de lactualité et de la technologie avec Rèmlok Industries! :','Les nouvelles vous sont offertes par Gal net point F R! le meilleurs site dinformation de la galaxie!','','élite-dangerouss.fr, pour tout savoir sur la galaxie et plus encore vous offre cette news!','','Le Discord Déhessène, le discord des explorateurs a une transmission pour vous :','',',','Une transmition locale rapporte que ', 'Information: ', 'Transmission interceptée.  Le contenu indique que ','Vous êtes en panne, avez besoin de réparation ou de réapprovisionnements ? Contactez SYMBIOSE, nous sommes là pour vous dépanner !')}\r\n   {OneOf(\"La faction dirigeante dans {system} n'est plus {event.oldfaction}, elle a été supplentée par {event.newfaction}.\", \"{event.newfaction} est devenu la faction dirigeante dans {system}, {event.oldfaction} est à l'index\")}",
      "default": false,
      "name": "System faction changed",
      "description": "Triggered when there is a change in the controlling faction of a watched system"
    },
    "System report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{set reportsystem to SystemDetails(state.eddi_context_system_system)}\r\n\r\n{if !reportsystem.name || reportbody.name = \"\":\r\n Je n'ai pas de système en mémoire pour lequel vous donner des informations.\r\n|else:\r\n {P(reportsystem.name)} est un système\r\n\r\n {if reportsystem.population && reportsystem.population > 0:\r\n  {if reportsystem.allegiance = \"Federation\":\r\n   {OneOf(\"de la Fédération\",\"fédéral\",\"d'allégeance fédérale\")},\r\n  |elif reportsystem.allegiance = \"Empire\":\r\n   {OneOf(\"Impérial\",\"de l'empire\",\"d'allégeance impériale\")}\r\n  |else:\r\n   {OneOf(\"Indépendant\",\"non-alligné\")},\r\n  }\r\n {if reportsystem.government:\r\n  dont le gouvernement est de type :{reportsystem.LocalGovernment)},\r\n |else:\r\n  ,\r\n }\r\n {OneOf(\"abritant \", \"ayant une population de \", \"étant le foyer de \", \"comportant \", \"composé de \")} {Humanise(reportsystem.population)} {OneOf(\"personnes\", \"habitants\")}\r\n {if reportsystem.power:\r\n  , {OneOf(\"dirigé par \", \"allié avec \", \"contrôlé par \")} {P(reportsystem.power)}\r\n }.\r\n\r\n {if reportsystem.faction:\r\n  {P(reportsystem.faction)} est {OneOf(\"la puissance \", \"la faction \", \"le groupe \", \"la corpo \")}{OneOf(\"ayant le contrôle \", \"locale \", \"principale \", \"dirrigeante\")} ici.\r\n }\r\n {if reportsystem.state:\r\n  etat politico-économique :{reportsystem.LocalState)},\r\n }\r\n\r\n {if reportsystem.primaryeconomy:\r\n  son économie principale est :{reportsystem.LocalEconomy)},\r\n }\r\n {if len(reportsystem.stations) = 0:\r\n  Il ny a pas de station présente.\r\n |else:\r\n  {if len(reportsystem.orbitalstations) = 0:\r\n   {if len(reportsystem.planetarystations) = 1:\r\n    Il y a {OneOf(\"une seule\", \"une unique\", \"juste une\")} station planétaire\r\n   |else:\r\n    il y a {len(reportsystem.planetarystations)} stations planétaires\r\n   }\r\n  |elif len(reportsystem.orbitalstations) = 1:\r\n   Il y a {OneOf(\"une seule\", \"une unique\", \"une\")} station orbitale\r\n   {if len(reportsystem.planetarystations) = 1:\r\n    et une station planétaire\r\n   |elif len(reportsystem.planetarystations) > 1:\r\n    et {len(reportsystem.planetarystations)} stations planétaires\r\n   }\r\n  |else:\r\n   il y a {len(reportsystem.orbitalstations)} stations orbitale\r\n   {if len(reportsystem.planetarystations) = 1:\r\n    et {OneOf(\"une seule\", \"une\")} station planétaire\r\n   |elif len(reportsystem.planetarystations) > 1:\r\n    et {len(reportsystem.planetarystations)} stations planétaires\r\n   }\r\n  }\r\n }\r\n {OneOf(\"ici\",\"dans ce système\",\"localement\")}\r\n |else:\r\n dépeuplé\r\n }.\r\n}",
      "default": false,
      "name": "System report",
      "description": "Function to report on the details of the contextual star system"
    },
    "System state changed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n\r\n{SetState('eddi_context_last_subject', 'system')}\r\n{SetState('eddi_context_last_action', 'change_state')}\r\n{SetState('eddi_context_system', event.system)}\r\n{SetState('eddi_context_system_system', event.system)}\r\n\r\n{_ Set up our system name}\r\n{if event.system = homesystem.name:\r\n  {set system to OneOf('{P(event.system)}',\r\n                       'Votre système habitat')}\r\n|elif event.system = system.name:\r\n  {set system to OneOf('{P(event.system)}',\r\n                       'ce système où vous êtes')}\r\n|else:\r\n  {set system to OneOf('le système {P(event.system)}'\r\n                       '{P(event.system)}')}\r\n}\r\n\r\n{if event.newstate != 'None':\r\n  {_ System has entered a new state}\r\n  {OneOf('Restez à la pointe de lactualité et de la technologie avec Rèmlok Industries! :','Les nouvelles vous sont offertes par Gal net point F R! le meilleurs site dinformation de la galaxie!','','élite-dangerouss.fr, pour tout savoir sur la galaxie et plus encore vous offre cette news!','','Le Discord Déhessène, le discord des explorateurs a une transmission pour vous :','',',','Une transmition locale rapporte que ', 'Information: ', 'Transmission interceptée.  Le contenu indique que ','Vous êtes en panne, avez besoin de réparation ou de réapprovisionnements ? Contactez SYMBIOSE, nous sommes là pour vous dépanner !.')}\r\n  {if event.newstate = 'Boom':\r\n    {OneOf('{system} connait un boum économique','{system} connait un boum économique, cest le moment pour y commercer','{system} connait un boum économique, voir comment y investir','{system} entre dans une période de grands succés commerciaux','{system} entre dans une période de grands succés commerciaux, cest le moment di  spéculer','{system} entre dans une période de grands succés commerciaux, voir comment y investir')}\r\n  |elif event.newstate = 'Bust':\r\n    {system} Éprouve des difficultés économiques.\r\n  |elif event.newstate = 'Civil Unrest':\r\n    {OneOf('{system} Éprouve des troubles civils',\r\n           'Il y a des troubles dans le système {system}')}\r\n  |elif event.newstate = 'Civil War':\r\n    {OneOf('{system} Est en guerre avec une autre faction dans le même système',\r\n           'La guerre civile a éclaté à {system}',\r\n           '{system} est maintenant en guerre civile',\r\n           'Les hostilités ont éclaté dans {system}')}\r\n  |elif event.newstate = 'Election':\r\n    {system} est en precessus électoral\r\n  |elif event.newstate = 'Expansion':\r\n    {OneOf('Une faction dans {system} essaie de se développer vers un système voisin',\r\n           'Une faction dans {system} se prépare à se développer vers un système voisin')}\r\n  |elif event.newstate = 'Famine':\r\n    {system} subie une famine\r\n  |elif event.newstate = 'Investment':\r\n    La faction de contrôlant {system} investit fortement dans son infrastructure locale\r\n  |elif event.newstate = 'Lockdown':\r\n    {system} a accru la sécurité en raison dun blocus par la faction y aillant le contrôle\r\n  |elif event.newstate = 'Outbreak':\r\n    {system} souffre dune épidémie virale ou bactérienne sévère. \r\n  |elif event.newstate = 'Retreat':\r\n    La faction contrôlant {system} se retire dun système voisin\r\n  |elif event.newstate = 'War':\r\n    {system} est désormais en guerre avec un système voisin\r\n  |else:\r\n    {OneOf('{system} est entré en {event.state}',\r\n           '{system} est maintenant dans un état de {event.state}')}\r\n  }.\r\n}",
      "default": false,
      "name": "System state changed",
      "description": "Triggered when there is a change in the state of a watched system"
    },
    "System state report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{set reportsystem to SystemDetails(state.eddi_context_system_system)}\r\n\r\n{if !reportsystem.name || reportbody.name = \"\":\r\n    Je ne sais pas au sujet de quel système les données sont demandées.\r\n|else:\r\n    {P(reportsystem.name)}\r\n    {if reportsystem.state = \"None\":\r\n      n'a rien de particulier actuellement\r\n    |elif reportsystem.state = \"Retreat\":\r\n        est en retraite\r\n    |elif reportsystem.state = \"War\":\r\n        est en guerre; la prudence est de rigueur\r\n    |elif reportsystem.state = \"Boom\":\r\n        est en plein boum commercial; Il y a surement de bons bénéfices à y faire\r\n    |elif reportsystem.state = \"Civil War\":\r\n        Il y a des troubles civils;  la prudence est de rigueur\r\n    |elif reportsystem.state = \"Civil War\":\r\n        est en guerre civile;  la prudence est de rigueur\r\n    |elif reportsystem.state = \"Famine\":\r\n        Subie une épidémie;  la prudence est de rigueur\r\n    |elif reportsystem.state = \"Lockdown\":\r\n        est en grève; la prudence est de rigueur\r\n    |elif reportsystem.state = \"Outbreak\":\r\n        tente de contenir une épidémie sérieuse; la prudence est de rigueur\r\n    |elif reportsystem.state = \"Expansion\":\r\n        se prépare à se développer vers un autre système\r\n    |elif reportsystem.state = \"Bust\":\r\n        est en crise économique\r\n    |elif reportsystem.state = \"Election\":\r\n        est en plein processus électoral\r\n    |elif reportsystem.state = \"Investment\":\r\n        investi lourdement dans ses infrastuctures\r\n    |else:\r\n    }\r\n    .\r\n}",
      "default": false,
      "name": "System state report",
      "description": "Report on the current state of the contextual system"
    },
    "Touchdown": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set body to BodyDetails(state.eddi_context_body_name, state.eddi_context_system_name)}\r\n\r\n{if event.playercontrolled = true:\r\n  Attérissage sur {P(body.name)} réussi.\r\n  {Pause(2000)}\r\n|else:\r\n  {ShipName()} a attéri sur {P(body.name)}.\r\n}\r\n\r\nles coordonées sont {round(event.longitude, 2)} degrés de longitude, {round(event.latitude, 2)} degrés de latitude.\r\n\r\n",
      "default": false,
      "name": "Touchdown",
      "description": "Triggered when your ship touches down on a planet's surface"
    },
    "Trade data purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'tradedata')}\r\n{SetState('eddi_context_last_action', 'buy')}\r\n{SetState('eddi_context_tradedata_name', event.system)}\r\n\r\n{OneOf(\"Données commerciales achetées pour le systèmes {P(event.system)}\", \"les données commerciales pour {P(event.system)} sont maintenant enregistrées\", \"Les données commerciales de {P(event.system)} ont été envoyées par les services éconamiques de la station\",  \"Réception des données commerciales de {P(event.system)} confirmée\")}.",
      "default": false,
      "name": "Trade data purchased",
      "description": "Triggered when you purchase trade data"
    },
    "Trade promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'rank')}\r\n{SetState('eddi_context_last_action', 'promotion')}\r\n{SetState('eddi_context_rank_name', 'trade')}\r\n{SetState('eddi_context_rank_amount', event.rating)}\r\n\r\n{OneOf('Vos capacités commerciales vous ont portées au titre de','Grace à vos bénéfices commerciaux, vous avez gagné le rang de')} {event.LocalRating}.",
      "default": false,
      "name": "Trade promotion",
      "description": "Triggered when your trade rank increases"
    },
    "Trade voucher redeemed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'trade_voucher')}\r\n{SetState('eddi_context_last_action', 'redeem')}\r\n{SetState('eddi_context_trade_voucher_amount', event.amount)}\r\n\r\n {Humanise(event.amount)} crédits versé\r\n{Occasionally(2, \"\r\n  {if len(event.rewards) = 1:\r\n    par {P(event.rewards[0].faction)}\r\n  |else:\r\n    dont\r\n    {set cur to 0}\r\n    {while cur < len(event.rewards):\r\n        {if cur = 0:\r\n        |elif cur < len(event.rewards) - 1:\r\n            , \r\n        |else:\r\n            et\r\n        }\r\n        {P(event.rewards[cur].faction)}\r\n        {set cur to cur + 1}\r\n    }\r\n  }\r\n\")}.\r\n\r\n\r\n\r\n",
      "default": false,
      "name": "Trade voucher redeemed",
      "description": "Triggered when you redeem a trade voucher"
    },
    "Undocked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Le contrôle complet du vaisseai vous est rendu\", \"ecoutilles d'amarrage libérées\", \"Déconnecté du réseau local\")}.\r\n\r\n{set limpetcheck to F(\"Limpet check\")}\r\n\r\n{if limpetcheck:\r\n    {Pause(5000)}\r\n    {limpetcheck}\r\n}",
      "default": false,
      "name": "Undocked",
      "description": "Triggered when your ship undocks from a station or outpost"
    },
    "Zone Occupée": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Avec l'accord de Nicou pour Remlock Industrie}\r\n{_ Avec l'accord de Duita Rider Pour Concordia}\r\n\r\n{if state.systemearrivee = \"Bragurom Du\" :\r\n{_ Station : Pellegrino Station.}\r\nMessage : Bienvenue sur Bragurom Du, commandant. Rèmlok Industries y produit des matériaux et modules de très haute qualité, ainsi que des composants Rèmlok. Merci de suivre les règles locales. // Welcome on Bragurom Du commandeur. Rèmlok Industries produces high tech materials, modules, and Rèmlok components. Please, follow the local rules.\r\n\r\n|elif state.systemearrivee = \"Edge Fraternity Landing\":\r\nBienvenu à EDGE FRATERNITY, système ouvert à tous les chercheurs et explorateurs. Attention, many french speaking here!\r\n\r\n|elif state.systemearrivee = \"CONCORDIA\":\r\nSoyez les bienvenus à CONCORDIA, centre de recherche inter-factions Francophones et base avancée d'exploration.\r\n\r\n}",
      "default": false,
      "name": "Zone Occupée",
      "description": null
    }
  }
}